{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTarget = void 0;\n\nconst isPlainObj = require(\"is-plain-obj\");\n\nconst logger_1 = require(\"./logger\");\n\nconst logger = (0, logger_1.getInstance)();\n\nasync function getTarget(req, config) {\n  let newTarget;\n  const router = config.router;\n\n  if (isPlainObj(router)) {\n    newTarget = getTargetFromProxyTable(req, router);\n  } else if (typeof router === 'function') {\n    newTarget = await router(req);\n  }\n\n  return newTarget;\n}\n\nexports.getTarget = getTarget;\n\nfunction getTargetFromProxyTable(req, table) {\n  let result;\n  const host = req.headers.host;\n  const path = req.url;\n  const hostAndPath = host + path;\n\n  for (const [key] of Object.entries(table)) {\n    if (containsPath(key)) {\n      if (hostAndPath.indexOf(key) > -1) {\n        // match 'localhost:3000/api'\n        result = table[key];\n        logger.debug('[HPM] Router table match: \"%s\"', key);\n        break;\n      }\n    } else {\n      if (key === host) {\n        // match 'localhost:3000'\n        result = table[key];\n        logger.debug('[HPM] Router table match: \"%s\"', host);\n        break;\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction containsPath(v) {\n  return v.indexOf('/') > -1;\n}","map":{"version":3,"sources":["C:/Users/nikro/Documents/GitHub/ampersand/gui/node_modules/http-proxy-middleware/dist/router.js"],"names":["Object","defineProperty","exports","value","getTarget","isPlainObj","require","logger_1","logger","getInstance","req","config","newTarget","router","getTargetFromProxyTable","table","result","host","headers","path","url","hostAndPath","key","entries","containsPath","indexOf","debug","v"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAME,MAAM,GAAG,CAAC,GAAGD,QAAQ,CAACE,WAAb,GAAf;;AACA,eAAeL,SAAf,CAAyBM,GAAzB,EAA8BC,MAA9B,EAAsC;AAClC,MAAIC,SAAJ;AACA,QAAMC,MAAM,GAAGF,MAAM,CAACE,MAAtB;;AACA,MAAIR,UAAU,CAACQ,MAAD,CAAd,EAAwB;AACpBD,IAAAA,SAAS,GAAGE,uBAAuB,CAACJ,GAAD,EAAMG,MAAN,CAAnC;AACH,GAFD,MAGK,IAAI,OAAOA,MAAP,KAAkB,UAAtB,EAAkC;AACnCD,IAAAA,SAAS,GAAG,MAAMC,MAAM,CAACH,GAAD,CAAxB;AACH;;AACD,SAAOE,SAAP;AACH;;AACDV,OAAO,CAACE,SAAR,GAAoBA,SAApB;;AACA,SAASU,uBAAT,CAAiCJ,GAAjC,EAAsCK,KAAtC,EAA6C;AACzC,MAAIC,MAAJ;AACA,QAAMC,IAAI,GAAGP,GAAG,CAACQ,OAAJ,CAAYD,IAAzB;AACA,QAAME,IAAI,GAAGT,GAAG,CAACU,GAAjB;AACA,QAAMC,WAAW,GAAGJ,IAAI,GAAGE,IAA3B;;AACA,OAAK,MAAM,CAACG,GAAD,CAAX,IAAoBtB,MAAM,CAACuB,OAAP,CAAeR,KAAf,CAApB,EAA2C;AACvC,QAAIS,YAAY,CAACF,GAAD,CAAhB,EAAuB;AACnB,UAAID,WAAW,CAACI,OAAZ,CAAoBH,GAApB,IAA2B,CAAC,CAAhC,EAAmC;AAC/B;AACAN,QAAAA,MAAM,GAAGD,KAAK,CAACO,GAAD,CAAd;AACAd,QAAAA,MAAM,CAACkB,KAAP,CAAa,gCAAb,EAA+CJ,GAA/C;AACA;AACH;AACJ,KAPD,MAQK;AACD,UAAIA,GAAG,KAAKL,IAAZ,EAAkB;AACd;AACAD,QAAAA,MAAM,GAAGD,KAAK,CAACO,GAAD,CAAd;AACAd,QAAAA,MAAM,CAACkB,KAAP,CAAa,gCAAb,EAA+CT,IAA/C;AACA;AACH;AACJ;AACJ;;AACD,SAAOD,MAAP;AACH;;AACD,SAASQ,YAAT,CAAsBG,CAAtB,EAAyB;AACrB,SAAOA,CAAC,CAACF,OAAF,CAAU,GAAV,IAAiB,CAAC,CAAzB;AACH","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTarget = void 0;\nconst isPlainObj = require(\"is-plain-obj\");\nconst logger_1 = require(\"./logger\");\nconst logger = (0, logger_1.getInstance)();\nasync function getTarget(req, config) {\n    let newTarget;\n    const router = config.router;\n    if (isPlainObj(router)) {\n        newTarget = getTargetFromProxyTable(req, router);\n    }\n    else if (typeof router === 'function') {\n        newTarget = await router(req);\n    }\n    return newTarget;\n}\nexports.getTarget = getTarget;\nfunction getTargetFromProxyTable(req, table) {\n    let result;\n    const host = req.headers.host;\n    const path = req.url;\n    const hostAndPath = host + path;\n    for (const [key] of Object.entries(table)) {\n        if (containsPath(key)) {\n            if (hostAndPath.indexOf(key) > -1) {\n                // match 'localhost:3000/api'\n                result = table[key];\n                logger.debug('[HPM] Router table match: \"%s\"', key);\n                break;\n            }\n        }\n        else {\n            if (key === host) {\n                // match 'localhost:3000'\n                result = table[key];\n                logger.debug('[HPM] Router table match: \"%s\"', host);\n                break;\n            }\n        }\n    }\n    return result;\n}\nfunction containsPath(v) {\n    return v.indexOf('/') > -1;\n}\n"]},"metadata":{},"sourceType":"script"}