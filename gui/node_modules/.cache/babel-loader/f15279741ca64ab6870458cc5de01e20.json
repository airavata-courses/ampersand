{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createConfig = void 0;\n\nconst isPlainObj = require(\"is-plain-obj\");\n\nconst url = require(\"url\");\n\nconst errors_1 = require(\"./errors\");\n\nconst logger_1 = require(\"./logger\");\n\nconst logger = (0, logger_1.getInstance)();\n\nfunction createConfig(context, opts) {\n  // structure of config object to be returned\n  const config = {\n    context: undefined,\n    options: {}\n  }; // app.use('/api', proxy({target:'http://localhost:9000'}));\n\n  if (isContextless(context, opts)) {\n    config.context = '/';\n    config.options = Object.assign(config.options, context); // app.use('/api', proxy('http://localhost:9000'));\n    // app.use(proxy('http://localhost:9000/api'));\n  } else if (isStringShortHand(context)) {\n    const oUrl = url.parse(context);\n    const target = [oUrl.protocol, '//', oUrl.host].join('');\n    config.context = oUrl.pathname || '/';\n    config.options = Object.assign(config.options, {\n      target\n    }, opts);\n\n    if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n      config.options.ws = true;\n    } // app.use('/api', proxy({target:'http://localhost:9000'}));\n\n  } else {\n    config.context = context;\n    config.options = Object.assign(config.options, opts);\n  }\n\n  configureLogger(config.options);\n\n  if (!config.options.target && !config.options.router) {\n    throw new Error(errors_1.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);\n  }\n\n  return config;\n}\n\nexports.createConfig = createConfig;\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n *      app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\n\nfunction isStringShortHand(context) {\n  if (typeof context === 'string') {\n    return !!url.parse(context).host;\n  }\n}\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\n\n\nfunction isContextless(context, opts) {\n  return isPlainObj(context) && (opts == null || Object.keys(opts).length === 0);\n}\n\nfunction configureLogger(options) {\n  if (options.logLevel) {\n    logger.setLevel(options.logLevel);\n  }\n\n  if (options.logProvider) {\n    logger.setProvider(options.logProvider);\n  }\n}","map":{"version":3,"sources":["C:/Users/nikro/Documents/GitHub/ampersand/gui/node_modules/http-proxy-middleware/dist/config-factory.js"],"names":["Object","defineProperty","exports","value","createConfig","isPlainObj","require","url","errors_1","logger_1","logger","getInstance","context","opts","config","undefined","options","isContextless","assign","isStringShortHand","oUrl","parse","target","protocol","host","join","pathname","ws","configureLogger","router","Error","ERRORS","ERR_CONFIG_FACTORY_TARGET_MISSING","keys","length","logLevel","setLevel","logProvider","setProvider"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createConfig = void 0;\nconst isPlainObj = require(\"is-plain-obj\");\nconst url = require(\"url\");\nconst errors_1 = require(\"./errors\");\nconst logger_1 = require(\"./logger\");\nconst logger = (0, logger_1.getInstance)();\nfunction createConfig(context, opts) {\n    // structure of config object to be returned\n    const config = {\n        context: undefined,\n        options: {},\n    };\n    // app.use('/api', proxy({target:'http://localhost:9000'}));\n    if (isContextless(context, opts)) {\n        config.context = '/';\n        config.options = Object.assign(config.options, context);\n        // app.use('/api', proxy('http://localhost:9000'));\n        // app.use(proxy('http://localhost:9000/api'));\n    }\n    else if (isStringShortHand(context)) {\n        const oUrl = url.parse(context);\n        const target = [oUrl.protocol, '//', oUrl.host].join('');\n        config.context = oUrl.pathname || '/';\n        config.options = Object.assign(config.options, { target }, opts);\n        if (oUrl.protocol === 'ws:' || oUrl.protocol === 'wss:') {\n            config.options.ws = true;\n        }\n        // app.use('/api', proxy({target:'http://localhost:9000'}));\n    }\n    else {\n        config.context = context;\n        config.options = Object.assign(config.options, opts);\n    }\n    configureLogger(config.options);\n    if (!config.options.target && !config.options.router) {\n        throw new Error(errors_1.ERRORS.ERR_CONFIG_FACTORY_TARGET_MISSING);\n    }\n    return config;\n}\nexports.createConfig = createConfig;\n/**\n * Checks if a String only target/config is provided.\n * This can be just the host or with the optional path.\n *\n * @example\n *      app.use('/api', proxy('http://localhost:9000'));\n *      app.use(proxy('http://localhost:9000/api'));\n *\n * @param  {String}  context [description]\n * @return {Boolean}         [description]\n */\nfunction isStringShortHand(context) {\n    if (typeof context === 'string') {\n        return !!url.parse(context).host;\n    }\n}\n/**\n * Checks if a Object only config is provided, without a context.\n * In this case the all paths will be proxied.\n *\n * @example\n *     app.use('/api', proxy({target:'http://localhost:9000'}));\n *\n * @param  {Object}  context [description]\n * @param  {*}       opts    [description]\n * @return {Boolean}         [description]\n */\nfunction isContextless(context, opts) {\n    return isPlainObj(context) && (opts == null || Object.keys(opts).length === 0);\n}\nfunction configureLogger(options) {\n    if (options.logLevel) {\n        logger.setLevel(options.logLevel);\n    }\n    if (options.logProvider) {\n        logger.setProvider(options.logProvider);\n    }\n}\n"]},"metadata":{},"sourceType":"script"}