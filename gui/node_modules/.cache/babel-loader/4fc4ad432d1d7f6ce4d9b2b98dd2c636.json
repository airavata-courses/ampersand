{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.match = void 0;\n\nconst isGlob = require(\"is-glob\");\n\nconst micromatch = require(\"micromatch\");\n\nconst url = require(\"url\");\n\nconst errors_1 = require(\"./errors\");\n\nfunction match(context, uri, req) {\n  // single path\n  if (isStringPath(context)) {\n    return matchSingleStringPath(context, uri);\n  } // single glob path\n\n\n  if (isGlobPath(context)) {\n    return matchSingleGlobPath(context, uri);\n  } // multi path\n\n\n  if (Array.isArray(context)) {\n    if (context.every(isStringPath)) {\n      return matchMultiPath(context, uri);\n    }\n\n    if (context.every(isGlobPath)) {\n      return matchMultiGlobPath(context, uri);\n    }\n\n    throw new Error(errors_1.ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY);\n  } // custom matching\n\n\n  if (typeof context === 'function') {\n    const pathname = getUrlPathName(uri);\n    return context(pathname, req);\n  }\n\n  throw new Error(errors_1.ERRORS.ERR_CONTEXT_MATCHER_GENERIC);\n}\n\nexports.match = match;\n/**\n * @param  {String} context '/api'\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\n\nfunction matchSingleStringPath(context, uri) {\n  const pathname = getUrlPathName(uri);\n  return pathname.indexOf(context) === 0;\n}\n\nfunction matchSingleGlobPath(pattern, uri) {\n  const pathname = getUrlPathName(uri);\n  const matches = micromatch([pathname], pattern);\n  return matches && matches.length > 0;\n}\n\nfunction matchMultiGlobPath(patternList, uri) {\n  return matchSingleGlobPath(patternList, uri);\n}\n/**\n * @param  {String} contextList ['/api', '/ajax']\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\n\n\nfunction matchMultiPath(contextList, uri) {\n  let isMultiPath = false;\n\n  for (const context of contextList) {\n    if (matchSingleStringPath(context, uri)) {\n      isMultiPath = true;\n      break;\n    }\n  }\n\n  return isMultiPath;\n}\n/**\n * Parses URI and returns RFC 3986 path\n *\n * @param  {String} uri from req.url\n * @return {String}     RFC 3986 path\n */\n\n\nfunction getUrlPathName(uri) {\n  return uri && url.parse(uri).pathname;\n}\n\nfunction isStringPath(context) {\n  return typeof context === 'string' && !isGlob(context);\n}\n\nfunction isGlobPath(context) {\n  return isGlob(context);\n}","map":{"version":3,"sources":["C:/Users/nikro/Documents/GitHub/ampersand/gui/node_modules/http-proxy-middleware/dist/context-matcher.js"],"names":["Object","defineProperty","exports","value","match","isGlob","require","micromatch","url","errors_1","context","uri","req","isStringPath","matchSingleStringPath","isGlobPath","matchSingleGlobPath","Array","isArray","every","matchMultiPath","matchMultiGlobPath","Error","ERRORS","ERR_CONTEXT_MATCHER_INVALID_ARRAY","pathname","getUrlPathName","ERR_CONTEXT_MATCHER_GENERIC","indexOf","pattern","matches","length","patternList","contextList","isMultiPath","parse"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.match = void 0;\nconst isGlob = require(\"is-glob\");\nconst micromatch = require(\"micromatch\");\nconst url = require(\"url\");\nconst errors_1 = require(\"./errors\");\nfunction match(context, uri, req) {\n    // single path\n    if (isStringPath(context)) {\n        return matchSingleStringPath(context, uri);\n    }\n    // single glob path\n    if (isGlobPath(context)) {\n        return matchSingleGlobPath(context, uri);\n    }\n    // multi path\n    if (Array.isArray(context)) {\n        if (context.every(isStringPath)) {\n            return matchMultiPath(context, uri);\n        }\n        if (context.every(isGlobPath)) {\n            return matchMultiGlobPath(context, uri);\n        }\n        throw new Error(errors_1.ERRORS.ERR_CONTEXT_MATCHER_INVALID_ARRAY);\n    }\n    // custom matching\n    if (typeof context === 'function') {\n        const pathname = getUrlPathName(uri);\n        return context(pathname, req);\n    }\n    throw new Error(errors_1.ERRORS.ERR_CONTEXT_MATCHER_GENERIC);\n}\nexports.match = match;\n/**\n * @param  {String} context '/api'\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\nfunction matchSingleStringPath(context, uri) {\n    const pathname = getUrlPathName(uri);\n    return pathname.indexOf(context) === 0;\n}\nfunction matchSingleGlobPath(pattern, uri) {\n    const pathname = getUrlPathName(uri);\n    const matches = micromatch([pathname], pattern);\n    return matches && matches.length > 0;\n}\nfunction matchMultiGlobPath(patternList, uri) {\n    return matchSingleGlobPath(patternList, uri);\n}\n/**\n * @param  {String} contextList ['/api', '/ajax']\n * @param  {String} uri     'http://example.org/api/b/c/d.html'\n * @return {Boolean}\n */\nfunction matchMultiPath(contextList, uri) {\n    let isMultiPath = false;\n    for (const context of contextList) {\n        if (matchSingleStringPath(context, uri)) {\n            isMultiPath = true;\n            break;\n        }\n    }\n    return isMultiPath;\n}\n/**\n * Parses URI and returns RFC 3986 path\n *\n * @param  {String} uri from req.url\n * @return {String}     RFC 3986 path\n */\nfunction getUrlPathName(uri) {\n    return uri && url.parse(uri).pathname;\n}\nfunction isStringPath(context) {\n    return typeof context === 'string' && !isGlob(context);\n}\nfunction isGlobPath(context) {\n    return isGlob(context);\n}\n"]},"metadata":{},"sourceType":"script"}