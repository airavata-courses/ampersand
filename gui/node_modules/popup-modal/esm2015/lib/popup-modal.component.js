/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input, ViewEncapsulation } from '@angular/core';
import { PopupModalService } from './popup-modal.service';
export class PopupModalComponent {
    /**
     * @param {?} modalService
     * @param {?} el
     */
    constructor(modalService, el) {
        this.modalService = modalService;
        this.el = el;
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let modal = this;
        if (!this.id) {
            console.error('Id is not available');
            return;
        }
        document.body.appendChild(this.element);
        // close modal on background click
        this.element.addEventListener('click', function (e) {
            if (e.target.className === 'ppl-modal') {
                modal.close();
            }
        });
        this.modalService.add(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.modalService.remove(this.id);
        this.element.remove();
    }
    /**
     * @return {?}
     */
    open() {
        this.element.style.display = 'block';
        document.body.classList.add('ppl-modal-open');
    }
    /**
     * @return {?}
     */
    close() {
        this.element.style.display = 'none';
        document.body.classList.remove('ppl-modal-open');
    }
}
PopupModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'ppl-popup-modal',
                template: `<div class="ppl-modal">
            <div class="ppl-modal-body">
                <ng-content></ng-content>
            </div>
        </div>
        <div class="ppl-modal-background"></div>`,
                styles: [`ppl-popup-modal{display:none}.ppl-modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:50;overflow:auto}.ppl-modal-background{position:fixed;top:0;right:0;bottom:0;left:0;background-color:#000;opacity:.8;z-index:10}.ppl-modal-body{padding:20px;background:#fff;margin:10%}body.ppl-modal-open{overflow:hidden}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
PopupModalComponent.ctorParameters = () => [
    { type: PopupModalService },
    { type: ElementRef }
];
PopupModalComponent.propDecorators = {
    id: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PopupModalComponent.prototype.id;
    /** @type {?} */
    PopupModalComponent.prototype.element;
    /** @type {?} */
    PopupModalComponent.prototype.modalService;
    /** @type {?} */
    PopupModalComponent.prototype.el;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAtbW9kYWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vcG9wdXAtbW9kYWwvIiwic291cmNlcyI6WyJsaWIvcG9wdXAtbW9kYWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQXFCLGlCQUFpQixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25HLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBYTFELE1BQU07Ozs7O0lBS0YsWUFBb0IsWUFBK0IsRUFBVSxFQUFjO1FBQXZELGlCQUFZLEdBQVosWUFBWSxDQUFtQjtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDdkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0tBQ25DOzs7O0lBRUQsUUFBUTs7UUFDSixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFakIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztZQUNyQyxNQUFNLENBQUM7U0FDVjtRQUVELFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs7UUFHeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFNO1lBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNqQjtTQUNKLENBQUMsQ0FBQztRQUdILElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9COzs7O0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3pCOzs7O0lBR0QsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDakQ7Ozs7SUFHRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNwQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNwRDs7O1lBeERKLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7O2lEQUtxQztnQkFDL0MsTUFBTSxFQUFFLENBQUMsMlRBQTJULENBQUM7Z0JBQ3JVLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7O1lBWlEsaUJBQWlCO1lBRE4sVUFBVTs7O2lCQWdCekIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCwgT25EZXN0cm95LCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9wdXBNb2RhbFNlcnZpY2UgfSBmcm9tICcuL3BvcHVwLW1vZGFsLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdwcGwtcG9wdXAtbW9kYWwnLFxuICB0ZW1wbGF0ZTogYDxkaXYgY2xhc3M9XCJwcGwtbW9kYWxcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwcGwtbW9kYWwtYm9keVwiPlxuICAgICAgICAgICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInBwbC1tb2RhbC1iYWNrZ3JvdW5kXCI+PC9kaXY+YCxcbiAgc3R5bGVzOiBbYHBwbC1wb3B1cC1tb2RhbHtkaXNwbGF5Om5vbmV9LnBwbC1tb2RhbHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDt6LWluZGV4OjUwO292ZXJmbG93OmF1dG99LnBwbC1tb2RhbC1iYWNrZ3JvdW5ke3Bvc2l0aW9uOmZpeGVkO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO2JhY2tncm91bmQtY29sb3I6IzAwMDtvcGFjaXR5Oi44O3otaW5kZXg6MTB9LnBwbC1tb2RhbC1ib2R5e3BhZGRpbmc6MjBweDtiYWNrZ3JvdW5kOiNmZmY7bWFyZ2luOjEwJX1ib2R5LnBwbC1tb2RhbC1vcGVue292ZXJmbG93OmhpZGRlbn1gXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZVxufSlcbmV4cG9ydCBjbGFzcyBQb3B1cE1vZGFsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gICAgQElucHV0KCkgaWQ6IHN0cmluZztcbiAgICBwcml2YXRlIGVsZW1lbnQ6IGFueTtcbiBcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogUG9wdXBNb2RhbFNlcnZpY2UsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWwubmF0aXZlRWxlbWVudDtcbiAgICB9XG4gXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIGxldCBtb2RhbCA9IHRoaXM7XG4gXG4gICAgICAgIGlmICghdGhpcy5pZCkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignSWQgaXMgbm90IGF2YWlsYWJsZScpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5lbGVtZW50KTtcbiBcbiAgICAgICAgLy8gY2xvc2UgbW9kYWwgb24gYmFja2dyb3VuZCBjbGlja1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZTogYW55KSB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NOYW1lID09PSAncHBsLW1vZGFsJykge1xuICAgICAgICAgICAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuIFxuICAgICAgICBcbiAgICAgICAgdGhpcy5tb2RhbFNlcnZpY2UuYWRkKHRoaXMpO1xuICAgIH1cbiBcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tb2RhbFNlcnZpY2UucmVtb3ZlKHRoaXMuaWQpO1xuICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlKCk7XG4gICAgfVxuIFxuICAgIC8vIG9wZW4gbW9kYWxcbiAgICBvcGVuKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZCgncHBsLW1vZGFsLW9wZW4nKTtcbiAgICB9XG4gXG4gICAgLy8gY2xvc2UgbW9kYWxcbiAgICBjbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgncHBsLW1vZGFsLW9wZW4nKTtcbiAgICB9XG5cbn1cbiJdfQ==