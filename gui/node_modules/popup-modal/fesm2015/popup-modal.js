import { Injectable, Component, ElementRef, Input, ViewEncapsulation, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class PopupModalService {
    constructor() {
        this.modals = [];
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    add(modal) {
        this.modals.push(modal);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    remove(id) {
        this.modals = this.modals.filter(x => x.id !== id);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    open(id) {
        /** @type {?} */
        let modal = this.modals.filter(x => x.id === id)[0];
        modal.open();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    close(id) {
        /** @type {?} */
        let modal = this.modals.filter(x => x.id === id)[0];
        modal.close();
    }
}
PopupModalService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
PopupModalService.ctorParameters = () => [];
/** @nocollapse */ PopupModalService.ngInjectableDef = defineInjectable({ factory: function PopupModalService_Factory() { return new PopupModalService(); }, token: PopupModalService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class PopupModalComponent {
    /**
     * @param {?} modalService
     * @param {?} el
     */
    constructor(modalService, el) {
        this.modalService = modalService;
        this.el = el;
        this.element = el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        let modal = this;
        if (!this.id) {
            console.error('Id is not available');
            return;
        }
        document.body.appendChild(this.element);
        // close modal on background click
        this.element.addEventListener('click', function (e) {
            if (e.target.className === 'ppl-modal') {
                modal.close();
            }
        });
        this.modalService.add(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.modalService.remove(this.id);
        this.element.remove();
    }
    /**
     * @return {?}
     */
    open() {
        this.element.style.display = 'block';
        document.body.classList.add('ppl-modal-open');
    }
    /**
     * @return {?}
     */
    close() {
        this.element.style.display = 'none';
        document.body.classList.remove('ppl-modal-open');
    }
}
PopupModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'ppl-popup-modal',
                template: `<div class="ppl-modal">
            <div class="ppl-modal-body">
                <ng-content></ng-content>
            </div>
        </div>
        <div class="ppl-modal-background"></div>`,
                styles: [`ppl-popup-modal{display:none}.ppl-modal{position:fixed;top:0;right:0;bottom:0;left:0;z-index:50;overflow:auto}.ppl-modal-background{position:fixed;top:0;right:0;bottom:0;left:0;background-color:#000;opacity:.8;z-index:10}.ppl-modal-body{padding:20px;background:#fff;margin:10%}body.ppl-modal-open{overflow:hidden}`],
                encapsulation: ViewEncapsulation.None
            },] },
];
/** @nocollapse */
PopupModalComponent.ctorParameters = () => [
    { type: PopupModalService },
    { type: ElementRef }
];
PopupModalComponent.propDecorators = {
    id: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class PopupModalModule {
}
PopupModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [],
                declarations: [PopupModalComponent],
                exports: [PopupModalComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { PopupModalService, PopupModalComponent, PopupModalModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAtbW9kYWwuanMubWFwIiwic291cmNlcyI6WyJuZzovL3BvcHVwLW1vZGFsL2xpYi9wb3B1cC1tb2RhbC5zZXJ2aWNlLnRzIiwibmc6Ly9wb3B1cC1tb2RhbC9saWIvcG9wdXAtbW9kYWwuY29tcG9uZW50LnRzIiwibmc6Ly9wb3B1cC1tb2RhbC9saWIvcG9wdXAtbW9kYWwubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUG9wdXBNb2RhbFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHJpdmF0ZSBtb2RhbHM6IGFueVtdID0gW107XG4gXG4gICAgYWRkKG1vZGFsOiBhbnkpIHtcbiAgICAgICAgdGhpcy5tb2RhbHMucHVzaChtb2RhbCk7XG4gICAgfVxuIFxuICAgIHJlbW92ZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubW9kYWxzID0gdGhpcy5tb2RhbHMuZmlsdGVyKHggPT4geC5pZCAhPT0gaWQpO1xuICAgIH1cbiBcbiAgICBvcGVuKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IG1vZGFsOiBhbnkgPSB0aGlzLm1vZGFscy5maWx0ZXIoeCA9PiB4LmlkID09PSBpZClbMF07XG4gICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICB9XG4gXG4gICAgY2xvc2UoaWQ6IHN0cmluZykge1xuICAgICAgICBsZXQgbW9kYWw6IGFueSA9IHRoaXMubW9kYWxzLmZpbHRlcih4ID0+IHguaWQgPT09IGlkKVswXTtcbiAgICAgICAgbW9kYWwuY2xvc2UoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBvcHVwTW9kYWxTZXJ2aWNlIH0gZnJvbSAnLi9wb3B1cC1tb2RhbC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncHBsLXBvcHVwLW1vZGFsJyxcbiAgdGVtcGxhdGU6IGA8ZGl2IGNsYXNzPVwicHBsLW1vZGFsXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicHBsLW1vZGFsLWJvZHlcIj5cbiAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcGwtbW9kYWwtYmFja2dyb3VuZFwiPjwvZGl2PmAsXG4gIHN0eWxlczogW2BwcGwtcG9wdXAtbW9kYWx7ZGlzcGxheTpub25lfS5wcGwtbW9kYWx7cG9zaXRpb246Zml4ZWQ7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7ei1pbmRleDo1MDtvdmVyZmxvdzphdXRvfS5wcGwtbW9kYWwtYmFja2dyb3VuZHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtyaWdodDowO2JvdHRvbTowO2xlZnQ6MDtiYWNrZ3JvdW5kLWNvbG9yOiMwMDA7b3BhY2l0eTouODt6LWluZGV4OjEwfS5wcGwtbW9kYWwtYm9keXtwYWRkaW5nOjIwcHg7YmFja2dyb3VuZDojZmZmO21hcmdpbjoxMCV9Ym9keS5wcGwtbW9kYWwtb3BlbntvdmVyZmxvdzpoaWRkZW59YF0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgUG9wdXBNb2RhbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIEBJbnB1dCgpIGlkOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBlbGVtZW50OiBhbnk7XG4gXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBtb2RhbFNlcnZpY2U6IFBvcHVwTW9kYWxTZXJ2aWNlLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgfVxuIFxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBsZXQgbW9kYWwgPSB0aGlzO1xuIFxuICAgICAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0lkIGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuIFxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuZWxlbWVudCk7XG4gXG4gICAgICAgIC8vIGNsb3NlIG1vZGFsIG9uIGJhY2tncm91bmQgY2xpY2tcbiAgICAgICAgdGhpcy5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGU6IGFueSkge1xuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTmFtZSA9PT0gJ3BwbC1tb2RhbCcpIHtcbiAgICAgICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiBcbiAgICAgICAgXG4gICAgICAgIHRoaXMubW9kYWxTZXJ2aWNlLmFkZCh0aGlzKTtcbiAgICB9XG4gXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMubW9kYWxTZXJ2aWNlLnJlbW92ZSh0aGlzLmlkKTtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZSgpO1xuICAgIH1cbiBcbiAgICAvLyBvcGVuIG1vZGFsXG4gICAgb3BlbigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoJ3BwbC1tb2RhbC1vcGVuJyk7XG4gICAgfVxuIFxuICAgIC8vIGNsb3NlIG1vZGFsXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ3BwbC1tb2RhbC1vcGVuJyk7XG4gICAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUG9wdXBNb2RhbENvbXBvbmVudCB9IGZyb20gJy4vcG9wdXAtbW9kYWwuY29tcG9uZW50JztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtQb3B1cE1vZGFsQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW1BvcHVwTW9kYWxDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFBvcHVwTW9kYWxNb2R1bGUgeyB9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7SUFPRTtzQkFFd0IsRUFBRTtLQUZUOzs7OztJQUlmLEdBQUcsQ0FBQyxLQUFVO1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0I7Ozs7O0lBRUQsTUFBTSxDQUFDLEVBQVU7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0tBQ3REOzs7OztJQUVELElBQUksQ0FBQyxFQUFVOztRQUNYLElBQUksS0FBSyxHQUFRLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3pELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNoQjs7Ozs7SUFFRCxLQUFLLENBQUMsRUFBVTs7UUFDWixJQUFJLEtBQUssR0FBUSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDakI7OztZQXpCSixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7Ozs7Ozs7QUNKRDs7Ozs7SUFtQkksWUFBb0IsWUFBK0IsRUFBVSxFQUFjO1FBQXZELGlCQUFZLEdBQVosWUFBWSxDQUFtQjtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFDdkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO0tBQ25DOzs7O0lBRUQsUUFBUTs7UUFDSixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUM7UUFFakIsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7WUFDckMsT0FBTztTQUNWO1FBRUQsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztRQUd4QyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQU07WUFDbkQsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxXQUFXLEVBQUU7Z0JBQ3BDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNqQjtTQUNKLENBQUMsQ0FBQztRQUdILElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQy9COzs7O0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQ3pCOzs7O0lBR0QsSUFBSTtRQUNBLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDckMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7S0FDakQ7Ozs7SUFHRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUNwQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUNwRDs7O1lBeERKLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7O2lEQUtxQztnQkFDL0MsTUFBTSxFQUFFLENBQUMsMlRBQTJULENBQUM7Z0JBQ3JVLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3RDOzs7O1lBWlEsaUJBQWlCO1lBRE4sVUFBVTs7O2lCQWdCekIsS0FBSzs7Ozs7OztBQ2hCVjs7O1lBR0MsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxFQUNSO2dCQUNELFlBQVksRUFBRSxDQUFDLG1CQUFtQixDQUFDO2dCQUNuQyxPQUFPLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQzthQUMvQjs7Ozs7Ozs7Ozs7Ozs7OyJ9