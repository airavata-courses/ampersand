/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var PopupModalService = /** @class */ (function () {
    function PopupModalService() {
        this.modals = [];
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    PopupModalService.prototype.add = /**
     * @param {?} modal
     * @return {?}
     */
    function (modal) {
        this.modals.push(modal);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PopupModalService.prototype.remove = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.modals = this.modals.filter(function (x) { return x.id !== id; });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PopupModalService.prototype.open = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var modal = this.modals.filter(function (x) { return x.id === id; })[0];
        modal.open();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    PopupModalService.prototype.close = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var modal = this.modals.filter(function (x) { return x.id === id; })[0];
        modal.close();
    };
    PopupModalService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    PopupModalService.ctorParameters = function () { return []; };
    /** @nocollapse */ PopupModalService.ngInjectableDef = i0.defineInjectable({ factory: function PopupModalService_Factory() { return new PopupModalService(); }, token: PopupModalService, providedIn: "root" });
    return PopupModalService;
}());
export { PopupModalService };
if (false) {
    /** @type {?} */
    PopupModalService.prototype.modals;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wdXAtbW9kYWwuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3BvcHVwLW1vZGFsLyIsInNvdXJjZXMiOlsibGliL3BvcHVwLW1vZGFsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztJQU96QztzQkFFd0IsRUFBRTtLQUZUOzs7OztJQUlmLCtCQUFHOzs7O0lBQUgsVUFBSSxLQUFVO1FBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDM0I7Ozs7O0lBRUQsa0NBQU07Ozs7SUFBTixVQUFPLEVBQVU7UUFDYixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7S0FDdEQ7Ozs7O0lBRUQsZ0NBQUk7Ozs7SUFBSixVQUFLLEVBQVU7O1FBQ1gsSUFBSSxLQUFLLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7S0FDaEI7Ozs7O0lBRUQsaUNBQUs7Ozs7SUFBTCxVQUFNLEVBQVU7O1FBQ1osSUFBSSxLQUFLLEdBQVEsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN6RCxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUM7S0FDakI7O2dCQXpCSixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs0QkFKRDs7U0FLYSxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFBvcHVwTW9kYWxTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIHByaXZhdGUgbW9kYWxzOiBhbnlbXSA9IFtdO1xuIFxuICAgIGFkZChtb2RhbDogYW55KSB7XG4gICAgICAgIHRoaXMubW9kYWxzLnB1c2gobW9kYWwpO1xuICAgIH1cbiBcbiAgICByZW1vdmUoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLm1vZGFscyA9IHRoaXMubW9kYWxzLmZpbHRlcih4ID0+IHguaWQgIT09IGlkKTtcbiAgICB9XG4gXG4gICAgb3BlbihpZDogc3RyaW5nKSB7XG4gICAgICAgIGxldCBtb2RhbDogYW55ID0gdGhpcy5tb2RhbHMuZmlsdGVyKHggPT4geC5pZCA9PT0gaWQpWzBdO1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfVxuIFxuICAgIGNsb3NlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgbGV0IG1vZGFsOiBhbnkgPSB0aGlzLm1vZGFscy5maWx0ZXIoeCA9PiB4LmlkID09PSBpZClbMF07XG4gICAgICAgIG1vZGFsLmNsb3NlKCk7XG4gICAgfVxufVxuIl19