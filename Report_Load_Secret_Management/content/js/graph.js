/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 146.0, "minX": 0.0, "maxY": 60104.0, "series": [{"data": [[0.0, 317.0], [0.1, 395.0], [0.2, 397.0], [0.3, 402.0], [0.4, 417.0], [0.5, 479.0], [0.6, 482.0], [0.7, 487.0], [0.8, 491.0], [0.9, 499.0], [1.0, 502.0], [1.1, 514.0], [1.2, 517.0], [1.3, 518.0], [1.4, 519.0], [1.5, 524.0], [1.6, 526.0], [1.7, 530.0], [1.8, 537.0], [1.9, 541.0], [2.0, 541.0], [2.1, 555.0], [2.2, 564.0], [2.3, 577.0], [2.4, 579.0], [2.5, 582.0], [2.6, 584.0], [2.7, 587.0], [2.8, 595.0], [2.9, 599.0], [3.0, 609.0], [3.1, 611.0], [3.2, 613.0], [3.3, 625.0], [3.4, 631.0], [3.5, 640.0], [3.6, 644.0], [3.7, 652.0], [3.8, 652.0], [3.9, 658.0], [4.0, 660.0], [4.1, 671.0], [4.2, 671.0], [4.3, 672.0], [4.4, 683.0], [4.5, 689.0], [4.6, 691.0], [4.7, 692.0], [4.8, 697.0], [4.9, 706.0], [5.0, 708.0], [5.1, 713.0], [5.2, 719.0], [5.3, 720.0], [5.4, 723.0], [5.5, 727.0], [5.6, 732.0], [5.7, 733.0], [5.8, 735.0], [5.9, 737.0], [6.0, 740.0], [6.1, 741.0], [6.2, 748.0], [6.3, 749.0], [6.4, 751.0], [6.5, 751.0], [6.6, 757.0], [6.7, 759.0], [6.8, 762.0], [6.9, 762.0], [7.0, 763.0], [7.1, 765.0], [7.2, 769.0], [7.3, 780.0], [7.4, 783.0], [7.5, 788.0], [7.6, 792.0], [7.7, 804.0], [7.8, 805.0], [7.9, 807.0], [8.0, 814.0], [8.1, 816.0], [8.2, 820.0], [8.3, 821.0], [8.4, 828.0], [8.5, 832.0], [8.6, 834.0], [8.7, 840.0], [8.8, 843.0], [8.9, 844.0], [9.0, 848.0], [9.1, 850.0], [9.2, 861.0], [9.3, 870.0], [9.4, 881.0], [9.5, 887.0], [9.6, 898.0], [9.7, 898.0], [9.8, 899.0], [9.9, 904.0], [10.0, 907.0], [10.1, 909.0], [10.2, 909.0], [10.3, 910.0], [10.4, 912.0], [10.5, 915.0], [10.6, 916.0], [10.7, 919.0], [10.8, 924.0], [10.9, 927.0], [11.0, 932.0], [11.1, 934.0], [11.2, 934.0], [11.3, 937.0], [11.4, 939.0], [11.5, 943.0], [11.6, 946.0], [11.7, 957.0], [11.8, 961.0], [11.9, 963.0], [12.0, 964.0], [12.1, 976.0], [12.2, 976.0], [12.3, 990.0], [12.4, 990.0], [12.5, 990.0], [12.6, 992.0], [12.7, 993.0], [12.8, 1000.0], [12.9, 1008.0], [13.0, 1013.0], [13.1, 1017.0], [13.2, 1018.0], [13.3, 1021.0], [13.4, 1022.0], [13.5, 1025.0], [13.6, 1025.0], [13.7, 1029.0], [13.8, 1040.0], [13.9, 1042.0], [14.0, 1042.0], [14.1, 1045.0], [14.2, 1046.0], [14.3, 1052.0], [14.4, 1053.0], [14.5, 1054.0], [14.6, 1061.0], [14.7, 1063.0], [14.8, 1067.0], [14.9, 1069.0], [15.0, 1070.0], [15.1, 1079.0], [15.2, 1080.0], [15.3, 1084.0], [15.4, 1092.0], [15.5, 1094.0], [15.6, 1097.0], [15.7, 1098.0], [15.8, 1099.0], [15.9, 1100.0], [16.0, 1104.0], [16.1, 1110.0], [16.2, 1122.0], [16.3, 1131.0], [16.4, 1132.0], [16.5, 1140.0], [16.6, 1142.0], [16.7, 1142.0], [16.8, 1147.0], [16.9, 1147.0], [17.0, 1152.0], [17.1, 1153.0], [17.2, 1158.0], [17.3, 1161.0], [17.4, 1165.0], [17.5, 1166.0], [17.6, 1184.0], [17.7, 1194.0], [17.8, 1196.0], [17.9, 1197.0], [18.0, 1201.0], [18.1, 1204.0], [18.2, 1205.0], [18.3, 1205.0], [18.4, 1207.0], [18.5, 1212.0], [18.6, 1217.0], [18.7, 1226.0], [18.8, 1228.0], [18.9, 1239.0], [19.0, 1240.0], [19.1, 1241.0], [19.2, 1247.0], [19.3, 1247.0], [19.4, 1248.0], [19.5, 1255.0], [19.6, 1262.0], [19.7, 1265.0], [19.8, 1269.0], [19.9, 1274.0], [20.0, 1275.0], [20.1, 1275.0], [20.2, 1279.0], [20.3, 1281.0], [20.4, 1288.0], [20.5, 1301.0], [20.6, 1302.0], [20.7, 1302.0], [20.8, 1302.0], [20.9, 1304.0], [21.0, 1307.0], [21.1, 1309.0], [21.2, 1309.0], [21.3, 1319.0], [21.4, 1320.0], [21.5, 1326.0], [21.6, 1328.0], [21.7, 1330.0], [21.8, 1333.0], [21.9, 1337.0], [22.0, 1349.0], [22.1, 1356.0], [22.2, 1359.0], [22.3, 1366.0], [22.4, 1368.0], [22.5, 1370.0], [22.6, 1373.0], [22.7, 1375.0], [22.8, 1377.0], [22.9, 1378.0], [23.0, 1381.0], [23.1, 1389.0], [23.2, 1391.0], [23.3, 1395.0], [23.4, 1398.0], [23.5, 1408.0], [23.6, 1412.0], [23.7, 1415.0], [23.8, 1417.0], [23.9, 1418.0], [24.0, 1422.0], [24.1, 1423.0], [24.2, 1434.0], [24.3, 1436.0], [24.4, 1437.0], [24.5, 1453.0], [24.6, 1459.0], [24.7, 1462.0], [24.8, 1469.0], [24.9, 1469.0], [25.0, 1470.0], [25.1, 1475.0], [25.2, 1477.0], [25.3, 1489.0], [25.4, 1492.0], [25.5, 1494.0], [25.6, 1509.0], [25.7, 1513.0], [25.8, 1516.0], [25.9, 1521.0], [26.0, 1526.0], [26.1, 1532.0], [26.2, 1533.0], [26.3, 1534.0], [26.4, 1540.0], [26.5, 1542.0], [26.6, 1547.0], [26.7, 1560.0], [26.8, 1560.0], [26.9, 1574.0], [27.0, 1581.0], [27.1, 1597.0], [27.2, 1600.0], [27.3, 1601.0], [27.4, 1622.0], [27.5, 1636.0], [27.6, 1641.0], [27.7, 1654.0], [27.8, 1654.0], [27.9, 1655.0], [28.0, 1656.0], [28.1, 1658.0], [28.2, 1667.0], [28.3, 1671.0], [28.4, 1671.0], [28.5, 1675.0], [28.6, 1677.0], [28.7, 1680.0], [28.8, 1683.0], [28.9, 1695.0], [29.0, 1696.0], [29.1, 1711.0], [29.2, 1712.0], [29.3, 1725.0], [29.4, 1725.0], [29.5, 1727.0], [29.6, 1730.0], [29.7, 1738.0], [29.8, 1741.0], [29.9, 1748.0], [30.0, 1752.0], [30.1, 1753.0], [30.2, 1754.0], [30.3, 1760.0], [30.4, 1761.0], [30.5, 1763.0], [30.6, 1768.0], [30.7, 1769.0], [30.8, 1773.0], [30.9, 1792.0], [31.0, 1798.0], [31.1, 1804.0], [31.2, 1806.0], [31.3, 1807.0], [31.4, 1809.0], [31.5, 1809.0], [31.6, 1810.0], [31.7, 1812.0], [31.8, 1818.0], [31.9, 1820.0], [32.0, 1821.0], [32.1, 1822.0], [32.2, 1824.0], [32.3, 1825.0], [32.4, 1825.0], [32.5, 1826.0], [32.6, 1829.0], [32.7, 1831.0], [32.8, 1832.0], [32.9, 1832.0], [33.0, 1833.0], [33.1, 1849.0], [33.2, 1853.0], [33.3, 1854.0], [33.4, 1872.0], [33.5, 1888.0], [33.6, 1889.0], [33.7, 1894.0], [33.8, 1902.0], [33.9, 1923.0], [34.0, 1930.0], [34.1, 1956.0], [34.2, 1965.0], [34.3, 1977.0], [34.4, 1978.0], [34.5, 1980.0], [34.6, 1980.0], [34.7, 1989.0], [34.8, 1996.0], [34.9, 1996.0], [35.0, 2002.0], [35.1, 2010.0], [35.2, 2028.0], [35.3, 2029.0], [35.4, 2037.0], [35.5, 2037.0], [35.6, 2041.0], [35.7, 2042.0], [35.8, 2049.0], [35.9, 2051.0], [36.0, 2061.0], [36.1, 2064.0], [36.2, 2064.0], [36.3, 2077.0], [36.4, 2085.0], [36.5, 2085.0], [36.6, 2086.0], [36.7, 2100.0], [36.8, 2102.0], [36.9, 2103.0], [37.0, 2107.0], [37.1, 2108.0], [37.2, 2112.0], [37.3, 2121.0], [37.4, 2124.0], [37.5, 2125.0], [37.6, 2127.0], [37.7, 2130.0], [37.8, 2136.0], [37.9, 2151.0], [38.0, 2158.0], [38.1, 2160.0], [38.2, 2161.0], [38.3, 2165.0], [38.4, 2175.0], [38.5, 2199.0], [38.6, 2204.0], [38.7, 2205.0], [38.8, 2208.0], [38.9, 2211.0], [39.0, 2213.0], [39.1, 2220.0], [39.2, 2221.0], [39.3, 2222.0], [39.4, 2225.0], [39.5, 2227.0], [39.6, 2256.0], [39.7, 2261.0], [39.8, 2265.0], [39.9, 2266.0], [40.0, 2273.0], [40.1, 2276.0], [40.2, 2277.0], [40.3, 2279.0], [40.4, 2289.0], [40.5, 2300.0], [40.6, 2307.0], [40.7, 2339.0], [40.8, 2349.0], [40.9, 2353.0], [41.0, 2361.0], [41.1, 2377.0], [41.2, 2380.0], [41.3, 2386.0], [41.4, 2386.0], [41.5, 2392.0], [41.6, 2400.0], [41.7, 2442.0], [41.8, 2450.0], [41.9, 2456.0], [42.0, 2458.0], [42.1, 2458.0], [42.2, 2460.0], [42.3, 2462.0], [42.4, 2465.0], [42.5, 2466.0], [42.6, 2479.0], [42.7, 2493.0], [42.8, 2505.0], [42.9, 2512.0], [43.0, 2516.0], [43.1, 2523.0], [43.2, 2536.0], [43.3, 2536.0], [43.4, 2537.0], [43.5, 2551.0], [43.6, 2559.0], [43.7, 2561.0], [43.8, 2568.0], [43.9, 2582.0], [44.0, 2587.0], [44.1, 2595.0], [44.2, 2596.0], [44.3, 2596.0], [44.4, 2600.0], [44.5, 2600.0], [44.6, 2600.0], [44.7, 2641.0], [44.8, 2654.0], [44.9, 2660.0], [45.0, 2662.0], [45.1, 2679.0], [45.2, 2684.0], [45.3, 2691.0], [45.4, 2691.0], [45.5, 2700.0], [45.6, 2713.0], [45.7, 2743.0], [45.8, 2749.0], [45.9, 2760.0], [46.0, 2778.0], [46.1, 2784.0], [46.2, 2819.0], [46.3, 2825.0], [46.4, 2825.0], [46.5, 2836.0], [46.6, 2841.0], [46.7, 2847.0], [46.8, 2854.0], [46.9, 2862.0], [47.0, 2869.0], [47.1, 2874.0], [47.2, 2886.0], [47.3, 2905.0], [47.4, 2906.0], [47.5, 2933.0], [47.6, 2938.0], [47.7, 2947.0], [47.8, 2961.0], [47.9, 2962.0], [48.0, 2975.0], [48.1, 2983.0], [48.2, 2989.0], [48.3, 2999.0], [48.4, 3007.0], [48.5, 3008.0], [48.6, 3050.0], [48.7, 3051.0], [48.8, 3060.0], [48.9, 3068.0], [49.0, 3092.0], [49.1, 3099.0], [49.2, 3103.0], [49.3, 3113.0], [49.4, 3115.0], [49.5, 3132.0], [49.6, 3143.0], [49.7, 3143.0], [49.8, 3145.0], [49.9, 3151.0], [50.0, 3161.0], [50.1, 3165.0], [50.2, 3189.0], [50.3, 3194.0], [50.4, 3198.0], [50.5, 3200.0], [50.6, 3216.0], [50.7, 3217.0], [50.8, 3218.0], [50.9, 3232.0], [51.0, 3238.0], [51.1, 3240.0], [51.2, 3240.0], [51.3, 3250.0], [51.4, 3254.0], [51.5, 3276.0], [51.6, 3290.0], [51.7, 3308.0], [51.8, 3325.0], [51.9, 3328.0], [52.0, 3328.0], [52.1, 3339.0], [52.2, 3365.0], [52.3, 3369.0], [52.4, 3386.0], [52.5, 3401.0], [52.6, 3412.0], [52.7, 3418.0], [52.8, 3431.0], [52.9, 3456.0], [53.0, 3482.0], [53.1, 3491.0], [53.2, 3496.0], [53.3, 3502.0], [53.4, 3502.0], [53.5, 3540.0], [53.6, 3557.0], [53.7, 3594.0], [53.8, 3596.0], [53.9, 3607.0], [54.0, 3608.0], [54.1, 3626.0], [54.2, 3660.0], [54.3, 3663.0], [54.4, 3676.0], [54.5, 3687.0], [54.6, 3719.0], [54.7, 3737.0], [54.8, 3760.0], [54.9, 3765.0], [55.0, 3811.0], [55.1, 3817.0], [55.2, 3847.0], [55.3, 3875.0], [55.4, 3881.0], [55.5, 3892.0], [55.6, 3979.0], [55.7, 3992.0], [55.8, 4007.0], [55.9, 4033.0], [56.0, 4035.0], [56.1, 4068.0], [56.2, 4101.0], [56.3, 4138.0], [56.4, 4166.0], [56.5, 4193.0], [56.6, 4195.0], [56.7, 4199.0], [56.8, 4256.0], [56.9, 4297.0], [57.0, 4298.0], [57.1, 4304.0], [57.2, 4417.0], [57.3, 4455.0], [57.4, 4457.0], [57.5, 4516.0], [57.6, 4540.0], [57.7, 4540.0], [57.8, 4545.0], [57.9, 4569.0], [58.0, 4607.0], [58.1, 4665.0], [58.2, 4669.0], [58.3, 4865.0], [58.4, 4903.0], [58.5, 4925.0], [58.6, 4927.0], [58.7, 4948.0], [58.8, 4982.0], [58.9, 5026.0], [59.0, 5059.0], [59.1, 5099.0], [59.2, 5145.0], [59.3, 5147.0], [59.4, 5203.0], [59.5, 5263.0], [59.6, 5301.0], [59.7, 5430.0], [59.8, 5587.0], [59.9, 5641.0], [60.0, 5660.0], [60.1, 5744.0], [60.2, 6213.0], [60.3, 6214.0], [60.4, 6263.0], [60.5, 6599.0], [60.6, 7315.0], [60.7, 7669.0], [60.8, 16345.0], [60.9, 19438.0], [61.0, 20448.0], [61.1, 21930.0], [61.2, 22987.0], [61.3, 25378.0], [61.4, 27139.0], [61.5, 30188.0], [61.6, 30199.0], [61.7, 30207.0], [61.8, 30209.0], [61.9, 30213.0], [62.0, 30229.0], [62.1, 30229.0], [62.2, 30231.0], [62.3, 30232.0], [62.4, 30235.0], [62.5, 30237.0], [62.6, 30238.0], [62.7, 30243.0], [62.8, 30244.0], [62.9, 30246.0], [63.0, 30246.0], [63.1, 30249.0], [63.2, 30250.0], [63.3, 30254.0], [63.4, 30254.0], [63.5, 30254.0], [63.6, 30255.0], [63.7, 30259.0], [63.8, 30260.0], [63.9, 30262.0], [64.0, 30267.0], [64.1, 30271.0], [64.2, 30272.0], [64.3, 30273.0], [64.4, 30275.0], [64.5, 30276.0], [64.6, 30285.0], [64.7, 30285.0], [64.8, 30285.0], [64.9, 30289.0], [65.0, 30290.0], [65.1, 30290.0], [65.2, 30292.0], [65.3, 30292.0], [65.4, 30293.0], [65.5, 30296.0], [65.6, 30299.0], [65.7, 30300.0], [65.8, 30301.0], [65.9, 30302.0], [66.0, 30305.0], [66.1, 30305.0], [66.2, 30307.0], [66.3, 30308.0], [66.4, 30309.0], [66.5, 30310.0], [66.6, 30312.0], [66.7, 30314.0], [66.8, 30314.0], [66.9, 30315.0], [67.0, 30316.0], [67.1, 30318.0], [67.2, 30320.0], [67.3, 30322.0], [67.4, 30327.0], [67.5, 30327.0], [67.6, 30327.0], [67.7, 30331.0], [67.8, 30332.0], [67.9, 30333.0], [68.0, 30333.0], [68.1, 30334.0], [68.2, 30335.0], [68.3, 30335.0], [68.4, 30336.0], [68.5, 30337.0], [68.6, 30337.0], [68.7, 30337.0], [68.8, 30342.0], [68.9, 30343.0], [69.0, 30343.0], [69.1, 30344.0], [69.2, 30345.0], [69.3, 30347.0], [69.4, 30347.0], [69.5, 30348.0], [69.6, 30348.0], [69.7, 30349.0], [69.8, 30351.0], [69.9, 30351.0], [70.0, 30352.0], [70.1, 30354.0], [70.2, 30354.0], [70.3, 30355.0], [70.4, 30358.0], [70.5, 30364.0], [70.6, 30366.0], [70.7, 30369.0], [70.8, 30373.0], [70.9, 30374.0], [71.0, 30377.0], [71.1, 30377.0], [71.2, 30378.0], [71.3, 30387.0], [71.4, 30389.0], [71.5, 30390.0], [71.6, 30391.0], [71.7, 30393.0], [71.8, 30396.0], [71.9, 30398.0], [72.0, 30401.0], [72.1, 30404.0], [72.2, 30405.0], [72.3, 30409.0], [72.4, 30412.0], [72.5, 30413.0], [72.6, 30420.0], [72.7, 30426.0], [72.8, 30428.0], [72.9, 30430.0], [73.0, 30432.0], [73.1, 30435.0], [73.2, 30437.0], [73.3, 30438.0], [73.4, 30444.0], [73.5, 30444.0], [73.6, 30445.0], [73.7, 30449.0], [73.8, 30449.0], [73.9, 30450.0], [74.0, 30451.0], [74.1, 30452.0], [74.2, 30454.0], [74.3, 30455.0], [74.4, 30457.0], [74.5, 30462.0], [74.6, 30464.0], [74.7, 30472.0], [74.8, 30473.0], [74.9, 30479.0], [75.0, 30481.0], [75.1, 30498.0], [75.2, 30505.0], [75.3, 30507.0], [75.4, 30513.0], [75.5, 30535.0], [75.6, 30540.0], [75.7, 30541.0], [75.8, 30543.0], [75.9, 30545.0], [76.0, 30549.0], [76.1, 30550.0], [76.2, 30552.0], [76.3, 30574.0], [76.4, 30578.0], [76.5, 30582.0], [76.6, 30599.0], [76.7, 30601.0], [76.8, 30627.0], [76.9, 30643.0], [77.0, 30731.0], [77.1, 30750.0], [77.2, 30796.0], [77.3, 30843.0], [77.4, 30851.0], [77.5, 30865.0], [77.6, 30894.0], [77.7, 30932.0], [77.8, 30936.0], [77.9, 30982.0], [78.0, 31002.0], [78.1, 31028.0], [78.2, 31053.0], [78.3, 31058.0], [78.4, 31094.0], [78.5, 31099.0], [78.6, 31144.0], [78.7, 31241.0], [78.8, 31249.0], [78.9, 31398.0], [79.0, 31406.0], [79.1, 31407.0], [79.2, 31481.0], [79.3, 31522.0], [79.4, 31645.0], [79.5, 31669.0], [79.6, 31685.0], [79.7, 31720.0], [79.8, 31741.0], [79.9, 31764.0], [80.0, 31792.0], [80.1, 31894.0], [80.2, 32119.0], [80.3, 32419.0], [80.4, 32477.0], [80.5, 32490.0], [80.6, 32559.0], [80.7, 32594.0], [80.8, 32706.0], [80.9, 32820.0], [81.0, 32863.0], [81.1, 33018.0], [81.2, 33021.0], [81.3, 33050.0], [81.4, 33110.0], [81.5, 33274.0], [81.6, 33417.0], [81.7, 33531.0], [81.8, 33553.0], [81.9, 33724.0], [82.0, 33746.0], [82.1, 33902.0], [82.2, 33967.0], [82.3, 34004.0], [82.4, 34052.0], [82.5, 34711.0], [82.6, 35063.0], [82.7, 35124.0], [82.8, 35200.0], [82.9, 35282.0], [83.0, 35694.0], [83.1, 35807.0], [83.2, 36805.0], [83.3, 42213.0], [83.4, 42869.0], [83.5, 44138.0], [83.6, 45145.0], [83.7, 45306.0], [83.8, 46057.0], [83.9, 47279.0], [84.0, 47844.0], [84.1, 48049.0], [84.2, 48315.0], [84.3, 49245.0], [84.4, 50365.0], [84.5, 51135.0], [84.6, 51174.0], [84.7, 53161.0], [84.8, 53731.0], [84.9, 54108.0], [85.0, 55847.0], [85.1, 56238.0], [85.2, 56693.0], [85.3, 57414.0], [85.4, 57663.0], [85.5, 57692.0], [85.6, 57754.0], [85.7, 57772.0], [85.8, 57836.0], [85.9, 57850.0], [86.0, 57969.0], [86.1, 57999.0], [86.2, 58101.0], [86.3, 58106.0], [86.4, 58142.0], [86.5, 58143.0], [86.6, 58173.0], [86.7, 58198.0], [86.8, 58274.0], [86.9, 58367.0], [87.0, 58435.0], [87.1, 58544.0], [87.2, 58586.0], [87.3, 58591.0], [87.4, 58625.0], [87.5, 58725.0], [87.6, 58738.0], [87.7, 58830.0], [87.8, 58950.0], [87.9, 59075.0], [88.0, 59467.0], [88.1, 59498.0], [88.2, 59566.0], [88.3, 59618.0], [88.4, 59782.0], [88.5, 59868.0], [88.6, 59897.0], [88.7, 59907.0], [88.8, 59940.0], [88.9, 59954.0], [89.0, 59959.0], [89.1, 60017.0], [89.2, 60017.0], [89.3, 60017.0], [89.4, 60017.0], [89.5, 60018.0], [89.6, 60018.0], [89.7, 60018.0], [89.8, 60019.0], [89.9, 60019.0], [90.0, 60019.0], [90.1, 60019.0], [90.2, 60019.0], [90.3, 60019.0], [90.4, 60019.0], [90.5, 60019.0], [90.6, 60019.0], [90.7, 60020.0], [90.8, 60020.0], [90.9, 60020.0], [91.0, 60020.0], [91.1, 60020.0], [91.2, 60020.0], [91.3, 60020.0], [91.4, 60021.0], [91.5, 60021.0], [91.6, 60021.0], [91.7, 60021.0], [91.8, 60021.0], [91.9, 60021.0], [92.0, 60021.0], [92.1, 60021.0], [92.2, 60021.0], [92.3, 60022.0], [92.4, 60022.0], [92.5, 60022.0], [92.6, 60022.0], [92.7, 60022.0], [92.8, 60022.0], [92.9, 60022.0], [93.0, 60022.0], [93.1, 60022.0], [93.2, 60022.0], [93.3, 60022.0], [93.4, 60022.0], [93.5, 60022.0], [93.6, 60022.0], [93.7, 60023.0], [93.8, 60023.0], [93.9, 60023.0], [94.0, 60023.0], [94.1, 60023.0], [94.2, 60023.0], [94.3, 60023.0], [94.4, 60023.0], [94.5, 60023.0], [94.6, 60023.0], [94.7, 60023.0], [94.8, 60024.0], [94.9, 60024.0], [95.0, 60024.0], [95.1, 60024.0], [95.2, 60024.0], [95.3, 60024.0], [95.4, 60024.0], [95.5, 60024.0], [95.6, 60025.0], [95.7, 60025.0], [95.8, 60025.0], [95.9, 60025.0], [96.0, 60025.0], [96.1, 60025.0], [96.2, 60025.0], [96.3, 60026.0], [96.4, 60026.0], [96.5, 60026.0], [96.6, 60026.0], [96.7, 60026.0], [96.8, 60026.0], [96.9, 60026.0], [97.0, 60027.0], [97.1, 60027.0], [97.2, 60027.0], [97.3, 60027.0], [97.4, 60028.0], [97.5, 60028.0], [97.6, 60028.0], [97.7, 60028.0], [97.8, 60029.0], [97.9, 60031.0], [98.0, 60031.0], [98.1, 60032.0], [98.2, 60032.0], [98.3, 60033.0], [98.4, 60034.0], [98.5, 60034.0], [98.6, 60041.0], [98.7, 60044.0], [98.8, 60060.0], [98.9, 60063.0], [99.0, 60069.0], [99.1, 60072.0], [99.2, 60075.0], [99.3, 60076.0], [99.4, 60076.0], [99.5, 60077.0], [99.6, 60087.0], [99.7, 60090.0], [99.8, 60092.0], [99.9, 60093.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[0.0, 146.0], [0.1, 147.0], [0.2, 149.0], [0.3, 150.0], [0.4, 151.0], [0.5, 152.0], [0.6, 152.0], [0.7, 154.0], [0.8, 156.0], [0.9, 156.0], [1.0, 157.0], [1.1, 158.0], [1.2, 158.0], [1.3, 158.0], [1.4, 158.0], [1.5, 159.0], [1.6, 159.0], [1.7, 159.0], [1.8, 160.0], [1.9, 160.0], [2.0, 160.0], [2.1, 161.0], [2.2, 162.0], [2.3, 162.0], [2.4, 163.0], [2.5, 164.0], [2.6, 164.0], [2.7, 165.0], [2.8, 165.0], [2.9, 165.0], [3.0, 165.0], [3.1, 165.0], [3.2, 165.0], [3.3, 165.0], [3.4, 165.0], [3.5, 166.0], [3.6, 166.0], [3.7, 166.0], [3.8, 167.0], [3.9, 167.0], [4.0, 168.0], [4.1, 168.0], [4.2, 168.0], [4.3, 168.0], [4.4, 168.0], [4.5, 168.0], [4.6, 169.0], [4.7, 169.0], [4.8, 169.0], [4.9, 170.0], [5.0, 170.0], [5.1, 170.0], [5.2, 170.0], [5.3, 170.0], [5.4, 170.0], [5.5, 170.0], [5.6, 170.0], [5.7, 170.0], [5.8, 170.0], [5.9, 170.0], [6.0, 171.0], [6.1, 171.0], [6.2, 171.0], [6.3, 171.0], [6.4, 171.0], [6.5, 172.0], [6.6, 172.0], [6.7, 172.0], [6.8, 172.0], [6.9, 172.0], [7.0, 172.0], [7.1, 172.0], [7.2, 172.0], [7.3, 172.0], [7.4, 172.0], [7.5, 173.0], [7.6, 173.0], [7.7, 173.0], [7.8, 173.0], [7.9, 173.0], [8.0, 173.0], [8.1, 173.0], [8.2, 173.0], [8.3, 173.0], [8.4, 174.0], [8.5, 174.0], [8.6, 175.0], [8.7, 175.0], [8.8, 175.0], [8.9, 176.0], [9.0, 176.0], [9.1, 176.0], [9.2, 176.0], [9.3, 176.0], [9.4, 176.0], [9.5, 176.0], [9.6, 177.0], [9.7, 177.0], [9.8, 177.0], [9.9, 178.0], [10.0, 178.0], [10.1, 178.0], [10.2, 178.0], [10.3, 178.0], [10.4, 178.0], [10.5, 179.0], [10.6, 179.0], [10.7, 179.0], [10.8, 180.0], [10.9, 180.0], [11.0, 181.0], [11.1, 181.0], [11.2, 181.0], [11.3, 181.0], [11.4, 181.0], [11.5, 181.0], [11.6, 182.0], [11.7, 182.0], [11.8, 182.0], [11.9, 182.0], [12.0, 183.0], [12.1, 183.0], [12.2, 183.0], [12.3, 183.0], [12.4, 183.0], [12.5, 183.0], [12.6, 183.0], [12.7, 183.0], [12.8, 183.0], [12.9, 183.0], [13.0, 184.0], [13.1, 184.0], [13.2, 184.0], [13.3, 184.0], [13.4, 185.0], [13.5, 185.0], [13.6, 185.0], [13.7, 185.0], [13.8, 185.0], [13.9, 185.0], [14.0, 185.0], [14.1, 185.0], [14.2, 185.0], [14.3, 186.0], [14.4, 186.0], [14.5, 186.0], [14.6, 186.0], [14.7, 186.0], [14.8, 187.0], [14.9, 187.0], [15.0, 188.0], [15.1, 188.0], [15.2, 188.0], [15.3, 188.0], [15.4, 189.0], [15.5, 189.0], [15.6, 189.0], [15.7, 190.0], [15.8, 190.0], [15.9, 191.0], [16.0, 191.0], [16.1, 191.0], [16.2, 191.0], [16.3, 192.0], [16.4, 192.0], [16.5, 192.0], [16.6, 192.0], [16.7, 192.0], [16.8, 193.0], [16.9, 193.0], [17.0, 193.0], [17.1, 194.0], [17.2, 195.0], [17.3, 195.0], [17.4, 195.0], [17.5, 195.0], [17.6, 196.0], [17.7, 196.0], [17.8, 196.0], [17.9, 196.0], [18.0, 196.0], [18.1, 196.0], [18.2, 197.0], [18.3, 197.0], [18.4, 197.0], [18.5, 197.0], [18.6, 198.0], [18.7, 198.0], [18.8, 198.0], [18.9, 198.0], [19.0, 199.0], [19.1, 199.0], [19.2, 199.0], [19.3, 199.0], [19.4, 199.0], [19.5, 200.0], [19.6, 201.0], [19.7, 202.0], [19.8, 203.0], [19.9, 203.0], [20.0, 205.0], [20.1, 205.0], [20.2, 205.0], [20.3, 206.0], [20.4, 206.0], [20.5, 206.0], [20.6, 207.0], [20.7, 207.0], [20.8, 207.0], [20.9, 208.0], [21.0, 208.0], [21.1, 209.0], [21.2, 209.0], [21.3, 210.0], [21.4, 210.0], [21.5, 210.0], [21.6, 210.0], [21.7, 210.0], [21.8, 211.0], [21.9, 214.0], [22.0, 214.0], [22.1, 214.0], [22.2, 215.0], [22.3, 215.0], [22.4, 215.0], [22.5, 215.0], [22.6, 215.0], [22.7, 216.0], [22.8, 216.0], [22.9, 216.0], [23.0, 217.0], [23.1, 217.0], [23.2, 217.0], [23.3, 218.0], [23.4, 218.0], [23.5, 219.0], [23.6, 219.0], [23.7, 219.0], [23.8, 220.0], [23.9, 220.0], [24.0, 220.0], [24.1, 221.0], [24.2, 224.0], [24.3, 224.0], [24.4, 226.0], [24.5, 227.0], [24.6, 227.0], [24.7, 228.0], [24.8, 228.0], [24.9, 228.0], [25.0, 229.0], [25.1, 230.0], [25.2, 230.0], [25.3, 231.0], [25.4, 232.0], [25.5, 232.0], [25.6, 233.0], [25.7, 233.0], [25.8, 234.0], [25.9, 235.0], [26.0, 235.0], [26.1, 236.0], [26.2, 237.0], [26.3, 237.0], [26.4, 238.0], [26.5, 239.0], [26.6, 239.0], [26.7, 239.0], [26.8, 239.0], [26.9, 239.0], [27.0, 240.0], [27.1, 240.0], [27.2, 241.0], [27.3, 241.0], [27.4, 242.0], [27.5, 242.0], [27.6, 242.0], [27.7, 243.0], [27.8, 244.0], [27.9, 244.0], [28.0, 244.0], [28.1, 244.0], [28.2, 244.0], [28.3, 245.0], [28.4, 246.0], [28.5, 246.0], [28.6, 247.0], [28.7, 247.0], [28.8, 249.0], [28.9, 249.0], [29.0, 249.0], [29.1, 249.0], [29.2, 249.0], [29.3, 250.0], [29.4, 250.0], [29.5, 251.0], [29.6, 252.0], [29.7, 254.0], [29.8, 257.0], [29.9, 257.0], [30.0, 258.0], [30.1, 258.0], [30.2, 258.0], [30.3, 259.0], [30.4, 259.0], [30.5, 260.0], [30.6, 260.0], [30.7, 260.0], [30.8, 261.0], [30.9, 262.0], [31.0, 262.0], [31.1, 262.0], [31.2, 263.0], [31.3, 263.0], [31.4, 263.0], [31.5, 263.0], [31.6, 264.0], [31.7, 264.0], [31.8, 264.0], [31.9, 265.0], [32.0, 266.0], [32.1, 266.0], [32.2, 267.0], [32.3, 267.0], [32.4, 267.0], [32.5, 268.0], [32.6, 268.0], [32.7, 269.0], [32.8, 269.0], [32.9, 269.0], [33.0, 270.0], [33.1, 270.0], [33.2, 272.0], [33.3, 273.0], [33.4, 273.0], [33.5, 273.0], [33.6, 274.0], [33.7, 274.0], [33.8, 275.0], [33.9, 276.0], [34.0, 276.0], [34.1, 277.0], [34.2, 278.0], [34.3, 279.0], [34.4, 279.0], [34.5, 279.0], [34.6, 280.0], [34.7, 280.0], [34.8, 280.0], [34.9, 281.0], [35.0, 282.0], [35.1, 283.0], [35.2, 284.0], [35.3, 284.0], [35.4, 284.0], [35.5, 285.0], [35.6, 285.0], [35.7, 285.0], [35.8, 286.0], [35.9, 286.0], [36.0, 286.0], [36.1, 287.0], [36.2, 288.0], [36.3, 288.0], [36.4, 288.0], [36.5, 288.0], [36.6, 288.0], [36.7, 289.0], [36.8, 289.0], [36.9, 290.0], [37.0, 290.0], [37.1, 292.0], [37.2, 293.0], [37.3, 295.0], [37.4, 295.0], [37.5, 297.0], [37.6, 297.0], [37.7, 297.0], [37.8, 297.0], [37.9, 298.0], [38.0, 299.0], [38.1, 300.0], [38.2, 301.0], [38.3, 303.0], [38.4, 303.0], [38.5, 303.0], [38.6, 304.0], [38.7, 304.0], [38.8, 304.0], [38.9, 304.0], [39.0, 305.0], [39.1, 306.0], [39.2, 307.0], [39.3, 307.0], [39.4, 308.0], [39.5, 309.0], [39.6, 309.0], [39.7, 309.0], [39.8, 310.0], [39.9, 311.0], [40.0, 312.0], [40.1, 312.0], [40.2, 313.0], [40.3, 313.0], [40.4, 314.0], [40.5, 316.0], [40.6, 316.0], [40.7, 316.0], [40.8, 317.0], [40.9, 318.0], [41.0, 318.0], [41.1, 319.0], [41.2, 319.0], [41.3, 319.0], [41.4, 321.0], [41.5, 323.0], [41.6, 323.0], [41.7, 323.0], [41.8, 324.0], [41.9, 325.0], [42.0, 326.0], [42.1, 327.0], [42.2, 327.0], [42.3, 327.0], [42.4, 327.0], [42.5, 328.0], [42.6, 330.0], [42.7, 330.0], [42.8, 331.0], [42.9, 332.0], [43.0, 332.0], [43.1, 332.0], [43.2, 333.0], [43.3, 334.0], [43.4, 337.0], [43.5, 337.0], [43.6, 337.0], [43.7, 339.0], [43.8, 339.0], [43.9, 339.0], [44.0, 340.0], [44.1, 342.0], [44.2, 343.0], [44.3, 343.0], [44.4, 343.0], [44.5, 343.0], [44.6, 344.0], [44.7, 344.0], [44.8, 345.0], [44.9, 346.0], [45.0, 347.0], [45.1, 348.0], [45.2, 348.0], [45.3, 349.0], [45.4, 349.0], [45.5, 349.0], [45.6, 349.0], [45.7, 350.0], [45.8, 352.0], [45.9, 354.0], [46.0, 354.0], [46.1, 354.0], [46.2, 355.0], [46.3, 355.0], [46.4, 355.0], [46.5, 356.0], [46.6, 357.0], [46.7, 359.0], [46.8, 359.0], [46.9, 360.0], [47.0, 360.0], [47.1, 361.0], [47.2, 362.0], [47.3, 363.0], [47.4, 363.0], [47.5, 363.0], [47.6, 364.0], [47.7, 365.0], [47.8, 366.0], [47.9, 367.0], [48.0, 367.0], [48.1, 367.0], [48.2, 370.0], [48.3, 370.0], [48.4, 371.0], [48.5, 371.0], [48.6, 372.0], [48.7, 372.0], [48.8, 372.0], [48.9, 374.0], [49.0, 374.0], [49.1, 374.0], [49.2, 375.0], [49.3, 376.0], [49.4, 376.0], [49.5, 376.0], [49.6, 376.0], [49.7, 377.0], [49.8, 377.0], [49.9, 378.0], [50.0, 380.0], [50.1, 380.0], [50.2, 381.0], [50.3, 382.0], [50.4, 382.0], [50.5, 382.0], [50.6, 382.0], [50.7, 382.0], [50.8, 384.0], [50.9, 385.0], [51.0, 385.0], [51.1, 388.0], [51.2, 389.0], [51.3, 390.0], [51.4, 392.0], [51.5, 392.0], [51.6, 393.0], [51.7, 396.0], [51.8, 396.0], [51.9, 398.0], [52.0, 399.0], [52.1, 400.0], [52.2, 401.0], [52.3, 402.0], [52.4, 403.0], [52.5, 403.0], [52.6, 403.0], [52.7, 404.0], [52.8, 406.0], [52.9, 406.0], [53.0, 407.0], [53.1, 407.0], [53.2, 408.0], [53.3, 409.0], [53.4, 409.0], [53.5, 410.0], [53.6, 410.0], [53.7, 411.0], [53.8, 414.0], [53.9, 415.0], [54.0, 416.0], [54.1, 416.0], [54.2, 418.0], [54.3, 421.0], [54.4, 423.0], [54.5, 424.0], [54.6, 424.0], [54.7, 425.0], [54.8, 426.0], [54.9, 427.0], [55.0, 427.0], [55.1, 428.0], [55.2, 429.0], [55.3, 429.0], [55.4, 431.0], [55.5, 431.0], [55.6, 432.0], [55.7, 433.0], [55.8, 434.0], [55.9, 435.0], [56.0, 436.0], [56.1, 438.0], [56.2, 439.0], [56.3, 439.0], [56.4, 440.0], [56.5, 440.0], [56.6, 442.0], [56.7, 446.0], [56.8, 446.0], [56.9, 446.0], [57.0, 447.0], [57.1, 447.0], [57.2, 448.0], [57.3, 450.0], [57.4, 450.0], [57.5, 457.0], [57.6, 458.0], [57.7, 458.0], [57.8, 459.0], [57.9, 461.0], [58.0, 461.0], [58.1, 463.0], [58.2, 464.0], [58.3, 465.0], [58.4, 466.0], [58.5, 468.0], [58.6, 469.0], [58.7, 470.0], [58.8, 471.0], [58.9, 472.0], [59.0, 474.0], [59.1, 476.0], [59.2, 476.0], [59.3, 478.0], [59.4, 479.0], [59.5, 480.0], [59.6, 481.0], [59.7, 481.0], [59.8, 482.0], [59.9, 482.0], [60.0, 484.0], [60.1, 486.0], [60.2, 487.0], [60.3, 487.0], [60.4, 488.0], [60.5, 488.0], [60.6, 488.0], [60.7, 490.0], [60.8, 492.0], [60.9, 493.0], [61.0, 495.0], [61.1, 497.0], [61.2, 499.0], [61.3, 500.0], [61.4, 503.0], [61.5, 503.0], [61.6, 503.0], [61.7, 504.0], [61.8, 505.0], [61.9, 506.0], [62.0, 506.0], [62.1, 506.0], [62.2, 509.0], [62.3, 510.0], [62.4, 511.0], [62.5, 513.0], [62.6, 517.0], [62.7, 518.0], [62.8, 520.0], [62.9, 520.0], [63.0, 523.0], [63.1, 524.0], [63.2, 525.0], [63.3, 526.0], [63.4, 527.0], [63.5, 529.0], [63.6, 530.0], [63.7, 531.0], [63.8, 531.0], [63.9, 533.0], [64.0, 533.0], [64.1, 535.0], [64.2, 538.0], [64.3, 538.0], [64.4, 539.0], [64.5, 540.0], [64.6, 541.0], [64.7, 542.0], [64.8, 547.0], [64.9, 549.0], [65.0, 550.0], [65.1, 552.0], [65.2, 552.0], [65.3, 553.0], [65.4, 554.0], [65.5, 556.0], [65.6, 557.0], [65.7, 562.0], [65.8, 564.0], [65.9, 564.0], [66.0, 565.0], [66.1, 568.0], [66.2, 568.0], [66.3, 569.0], [66.4, 570.0], [66.5, 570.0], [66.6, 573.0], [66.7, 573.0], [66.8, 575.0], [66.9, 578.0], [67.0, 579.0], [67.1, 581.0], [67.2, 584.0], [67.3, 584.0], [67.4, 587.0], [67.5, 588.0], [67.6, 588.0], [67.7, 590.0], [67.8, 592.0], [67.9, 594.0], [68.0, 595.0], [68.1, 600.0], [68.2, 602.0], [68.3, 602.0], [68.4, 602.0], [68.5, 606.0], [68.6, 606.0], [68.7, 607.0], [68.8, 607.0], [68.9, 608.0], [69.0, 614.0], [69.1, 614.0], [69.2, 615.0], [69.3, 620.0], [69.4, 623.0], [69.5, 623.0], [69.6, 624.0], [69.7, 624.0], [69.8, 628.0], [69.9, 629.0], [70.0, 630.0], [70.1, 630.0], [70.2, 631.0], [70.3, 635.0], [70.4, 636.0], [70.5, 637.0], [70.6, 643.0], [70.7, 644.0], [70.8, 644.0], [70.9, 645.0], [71.0, 651.0], [71.1, 654.0], [71.2, 655.0], [71.3, 661.0], [71.4, 661.0], [71.5, 665.0], [71.6, 665.0], [71.7, 666.0], [71.8, 670.0], [71.9, 670.0], [72.0, 671.0], [72.1, 671.0], [72.2, 672.0], [72.3, 675.0], [72.4, 676.0], [72.5, 676.0], [72.6, 680.0], [72.7, 684.0], [72.8, 684.0], [72.9, 686.0], [73.0, 688.0], [73.1, 689.0], [73.2, 690.0], [73.3, 691.0], [73.4, 691.0], [73.5, 695.0], [73.6, 697.0], [73.7, 700.0], [73.8, 701.0], [73.9, 702.0], [74.0, 702.0], [74.1, 703.0], [74.2, 703.0], [74.3, 704.0], [74.4, 704.0], [74.5, 707.0], [74.6, 707.0], [74.7, 707.0], [74.8, 709.0], [74.9, 713.0], [75.0, 713.0], [75.1, 713.0], [75.2, 714.0], [75.3, 715.0], [75.4, 715.0], [75.5, 715.0], [75.6, 717.0], [75.7, 719.0], [75.8, 719.0], [75.9, 722.0], [76.0, 725.0], [76.1, 726.0], [76.2, 727.0], [76.3, 728.0], [76.4, 728.0], [76.5, 729.0], [76.6, 736.0], [76.7, 738.0], [76.8, 740.0], [76.9, 741.0], [77.0, 747.0], [77.1, 748.0], [77.2, 750.0], [77.3, 751.0], [77.4, 753.0], [77.5, 761.0], [77.6, 762.0], [77.7, 766.0], [77.8, 768.0], [77.9, 769.0], [78.0, 769.0], [78.1, 771.0], [78.2, 773.0], [78.3, 773.0], [78.4, 773.0], [78.5, 773.0], [78.6, 779.0], [78.7, 781.0], [78.8, 784.0], [78.9, 789.0], [79.0, 793.0], [79.1, 794.0], [79.2, 804.0], [79.3, 807.0], [79.4, 809.0], [79.5, 809.0], [79.6, 812.0], [79.7, 813.0], [79.8, 818.0], [79.9, 819.0], [80.0, 819.0], [80.1, 820.0], [80.2, 821.0], [80.3, 824.0], [80.4, 824.0], [80.5, 828.0], [80.6, 828.0], [80.7, 829.0], [80.8, 832.0], [80.9, 837.0], [81.0, 837.0], [81.1, 837.0], [81.2, 838.0], [81.3, 840.0], [81.4, 840.0], [81.5, 843.0], [81.6, 846.0], [81.7, 847.0], [81.8, 849.0], [81.9, 849.0], [82.0, 854.0], [82.1, 855.0], [82.2, 856.0], [82.3, 859.0], [82.4, 860.0], [82.5, 861.0], [82.6, 862.0], [82.7, 866.0], [82.8, 867.0], [82.9, 870.0], [83.0, 871.0], [83.1, 872.0], [83.2, 872.0], [83.3, 873.0], [83.4, 878.0], [83.5, 880.0], [83.6, 881.0], [83.7, 884.0], [83.8, 884.0], [83.9, 885.0], [84.0, 886.0], [84.1, 889.0], [84.2, 892.0], [84.3, 892.0], [84.4, 893.0], [84.5, 896.0], [84.6, 898.0], [84.7, 902.0], [84.8, 902.0], [84.9, 904.0], [85.0, 904.0], [85.1, 913.0], [85.2, 917.0], [85.3, 924.0], [85.4, 925.0], [85.5, 926.0], [85.6, 927.0], [85.7, 927.0], [85.8, 931.0], [85.9, 932.0], [86.0, 936.0], [86.1, 936.0], [86.2, 941.0], [86.3, 942.0], [86.4, 945.0], [86.5, 946.0], [86.6, 947.0], [86.7, 947.0], [86.8, 948.0], [86.9, 949.0], [87.0, 950.0], [87.1, 951.0], [87.2, 954.0], [87.3, 965.0], [87.4, 967.0], [87.5, 969.0], [87.6, 975.0], [87.7, 976.0], [87.8, 977.0], [87.9, 978.0], [88.0, 978.0], [88.1, 982.0], [88.2, 984.0], [88.3, 992.0], [88.4, 996.0], [88.5, 999.0], [88.6, 1004.0], [88.7, 1005.0], [88.8, 1011.0], [88.9, 1015.0], [89.0, 1017.0], [89.1, 1020.0], [89.2, 1031.0], [89.3, 1039.0], [89.4, 1046.0], [89.5, 1048.0], [89.6, 1056.0], [89.7, 1058.0], [89.8, 1065.0], [89.9, 1072.0], [90.0, 1075.0], [90.1, 1077.0], [90.2, 1083.0], [90.3, 1091.0], [90.4, 1093.0], [90.5, 1107.0], [90.6, 1117.0], [90.7, 1126.0], [90.8, 1126.0], [90.9, 1142.0], [91.0, 1144.0], [91.1, 1146.0], [91.2, 1152.0], [91.3, 1153.0], [91.4, 1156.0], [91.5, 1165.0], [91.6, 1175.0], [91.7, 1175.0], [91.8, 1180.0], [91.9, 1182.0], [92.0, 1183.0], [92.1, 1185.0], [92.2, 1196.0], [92.3, 1198.0], [92.4, 1198.0], [92.5, 1201.0], [92.6, 1209.0], [92.7, 1209.0], [92.8, 1209.0], [92.9, 1222.0], [93.0, 1229.0], [93.1, 1232.0], [93.2, 1236.0], [93.3, 1242.0], [93.4, 1242.0], [93.5, 1249.0], [93.6, 1261.0], [93.7, 1272.0], [93.8, 1275.0], [93.9, 1298.0], [94.0, 1300.0], [94.1, 1301.0], [94.2, 1302.0], [94.3, 1306.0], [94.4, 1311.0], [94.5, 1318.0], [94.6, 1326.0], [94.7, 1367.0], [94.8, 1370.0], [94.9, 1375.0], [95.0, 1378.0], [95.1, 1390.0], [95.2, 1392.0], [95.3, 1399.0], [95.4, 1419.0], [95.5, 1421.0], [95.6, 1428.0], [95.7, 1434.0], [95.8, 1446.0], [95.9, 1454.0], [96.0, 1462.0], [96.1, 1467.0], [96.2, 1472.0], [96.3, 1483.0], [96.4, 1492.0], [96.5, 1494.0], [96.6, 1511.0], [96.7, 1515.0], [96.8, 1536.0], [96.9, 1559.0], [97.0, 1567.0], [97.1, 1576.0], [97.2, 1577.0], [97.3, 1593.0], [97.4, 1596.0], [97.5, 1602.0], [97.6, 1603.0], [97.7, 1631.0], [97.8, 1670.0], [97.9, 1756.0], [98.0, 1780.0], [98.1, 1807.0], [98.2, 1841.0], [98.3, 1866.0], [98.4, 1917.0], [98.5, 1959.0], [98.6, 2060.0], [98.7, 2079.0], [98.8, 2081.0], [98.9, 2101.0], [99.0, 2217.0], [99.1, 2220.0], [99.2, 2226.0], [99.3, 2279.0], [99.4, 2362.0], [99.5, 2488.0], [99.6, 2563.0], [99.7, 2740.0], [99.8, 2799.0], [99.9, 3048.0], [100.0, 3071.0]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 213.0, "series": [{"data": [[33700.0, 2.0], [33900.0, 2.0], [33500.0, 2.0], [34700.0, 1.0], [33100.0, 1.0], [34100.0, 1.0], [35100.0, 1.0], [44100.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [45300.0, 1.0], [48300.0, 1.0], [51100.0, 2.0], [50300.0, 1.0], [52300.0, 1.0], [53100.0, 1.0], [54100.0, 1.0], [53700.0, 1.0], [59300.0, 1.0], [58500.0, 3.0], [58700.0, 2.0], [58100.0, 6.0], [57900.0, 2.0], [57700.0, 3.0], [58300.0, 1.0], [58900.0, 1.0], [60100.0, 1.0], [59900.0, 4.0], [59700.0, 1.0], [59500.0, 1.0], [300.0, 3.0], [400.0, 7.0], [500.0, 22.0], [600.0, 21.0], [700.0, 31.0], [800.0, 23.0], [900.0, 32.0], [1000.0, 34.0], [1100.0, 23.0], [1200.0, 27.0], [1300.0, 33.0], [1400.0, 23.0], [1500.0, 17.0], [1600.0, 21.0], [1700.0, 22.0], [1800.0, 29.0], [1900.0, 13.0], [2000.0, 19.0], [2100.0, 21.0], [2200.0, 20.0], [2300.0, 12.0], [2400.0, 13.0], [2500.0, 18.0], [2600.0, 12.0], [2800.0, 12.0], [2700.0, 8.0], [2900.0, 11.0], [3000.0, 9.0], [3100.0, 14.0], [3200.0, 14.0], [3300.0, 8.0], [3400.0, 9.0], [3500.0, 6.0], [3600.0, 8.0], [3700.0, 5.0], [3800.0, 6.0], [3900.0, 2.0], [4000.0, 5.0], [4100.0, 6.0], [4200.0, 3.0], [4300.0, 2.0], [4600.0, 4.0], [4400.0, 3.0], [4500.0, 5.0], [4800.0, 1.0], [4900.0, 5.0], [5000.0, 3.0], [5100.0, 3.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5600.0, 2.0], [5700.0, 1.0], [6200.0, 3.0], [6400.0, 1.0], [6500.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [16300.0, 1.0], [19400.0, 1.0], [20400.0, 1.0], [21900.0, 1.0], [22900.0, 1.0], [25300.0, 1.0], [27100.0, 1.0], [30300.0, 69.0], [30500.0, 16.0], [30400.0, 35.0], [30200.0, 43.0], [30600.0, 4.0], [30700.0, 3.0], [30100.0, 3.0], [31500.0, 1.0], [30800.0, 4.0], [31700.0, 4.0], [31600.0, 3.0], [31200.0, 2.0], [30900.0, 3.0], [31000.0, 7.0], [31100.0, 1.0], [31400.0, 4.0], [31300.0, 1.0], [32400.0, 3.0], [32100.0, 1.0], [32500.0, 2.0], [32200.0, 1.0], [32700.0, 1.0], [31800.0, 1.0], [33000.0, 4.0], [34000.0, 2.0], [33200.0, 1.0], [32800.0, 2.0], [33400.0, 1.0], [35800.0, 1.0], [35600.0, 1.0], [35000.0, 1.0], [35200.0, 2.0], [36800.0, 1.0], [42800.0, 1.0], [42200.0, 1.0], [46000.0, 1.0], [47200.0, 1.0], [47800.0, 1.0], [48000.0, 1.0], [49200.0, 1.0], [56200.0, 1.0], [55800.0, 1.0], [56600.0, 1.0], [59000.0, 1.0], [57600.0, 2.0], [57800.0, 2.0], [58200.0, 2.0], [57400.0, 1.0], [58400.0, 1.0], [58800.0, 1.0], [58600.0, 1.0], [60000.0, 119.0], [59600.0, 1.0], [59800.0, 2.0], [59400.0, 2.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[600.0, 61.0], [700.0, 60.0], [800.0, 60.0], [900.0, 43.0], [1000.0, 20.0], [1100.0, 22.0], [1200.0, 17.0], [1300.0, 15.0], [1400.0, 13.0], [1500.0, 10.0], [100.0, 213.0], [1600.0, 5.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 3.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [2700.0, 2.0], [3000.0, 2.0], [200.0, 203.0], [300.0, 153.0], [400.0, 101.0], [500.0, 75.0]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 397.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 681.0, "series": [{"data": [[0.0, 681.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 654.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 453.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 397.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 34.75675675675676, "minX": 1.65170874E12, "maxY": 147.45251396648044, "series": [{"data": [[1.6517088E12, 147.45251396648044], [1.65170886E12, 110.63013698630131], [1.65170874E12, 70.80766598220393], [1.65170892E12, 34.75675675675676]], "isOverall": false, "label": "Secret Management (load)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170892E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 168.0, "minX": 1.0, "maxY": 60071.666666666664, "series": [{"data": [[2.0, 19438.0], [3.0, 27139.0], [4.0, 16345.0], [5.0, 30455.0], [6.0, 21930.0], [7.0, 30241.0], [8.0, 4647.833333333334], [9.0, 20448.0], [10.0, 5053.8], [11.0, 48049.0], [12.0, 7070.555555555556], [13.0, 58586.0], [14.0, 58625.0], [15.0, 60026.0], [16.0, 29163.0], [17.0, 45306.0], [18.0, 909.0666666666666], [19.0, 60019.0], [20.0, 17295.285714285714], [22.0, 11208.818181818182], [24.0, 7729.5], [25.0, 57772.0], [26.0, 583.3333333333334], [27.0, 44177.5], [28.0, 4898.0], [29.0, 58106.0], [30.0, 827.1428571428571], [31.0, 52246.0], [32.0, 5413.692307692308], [33.0, 51135.0], [34.0, 4079.888888888889], [35.0, 58101.0], [36.0, 4532.142857142857], [37.0, 58143.0], [38.0, 9261.285714285714], [39.0, 58738.0], [40.0, 9113.42857142857], [41.0, 29922.0], [42.0, 6615.818181818182], [43.0, 57836.0], [44.0, 8493.125], [46.0, 8381.882352941177], [48.0, 6039.759999999999], [49.0, 58274.0], [50.0, 943.0], [52.0, 27805.0], [53.0, 42869.0], [54.0, 6162.25], [55.0, 59467.0], [56.0, 5324.866666666667], [58.0, 1444.8181818181818], [59.0, 60025.333333333336], [60.0, 3545.0625], [62.0, 1625.714285714286], [63.0, 60071.666666666664], [64.0, 3769.2307692307686], [66.0, 4210.545454545454], [67.0, 30393.0], [65.0, 30404.125], [68.0, 11164.583333333332], [70.0, 8458.333333333332], [71.0, 60022.0], [69.0, 60031.5], [72.0, 6295.533333333333], [74.0, 7077.0], [75.0, 60026.0], [73.0, 30451.0], [76.0, 4330.2], [78.0, 8322.444444444445], [79.0, 60027.0], [77.0, 60023.0], [80.0, 4149.357142857143], [82.0, 11198.0], [83.0, 30292.0], [81.0, 45148.0], [84.0, 7236.636363636364], [86.0, 4422.583333333334], [87.0, 30242.0], [85.0, 30238.0], [88.0, 3935.0526315789466], [90.0, 6077.777777777777], [91.0, 30287.0], [89.0, 30335.0], [94.0, 4028.423076923077], [95.0, 30373.0], [93.0, 30369.0], [92.0, 30229.0], [96.0, 2697.3846153846152], [98.0, 6450.0], [99.0, 30327.0], [97.0, 30372.5], [100.0, 2519.222222222222], [101.0, 9564.3125], [102.0, 21826.379310344826], [103.0, 13136.499999999998], [104.0, 5547.7], [105.0, 4873.8], [106.0, 8091.529411764706], [107.0, 9232.400000000001], [108.0, 25242.47368421052], [109.0, 11954.923076923078], [110.0, 18155.190476190477], [111.0, 8425.333333333332], [112.0, 3659.6666666666665], [113.0, 17678.176470588234], [114.0, 12079.714285714286], [115.0, 21180.3], [116.0, 28614.714285714286], [117.0, 11352.75], [119.0, 30437.0], [118.0, 30308.0], [123.0, 30377.0], [122.0, 30472.0], [121.0, 30464.0], [120.0, 30368.142857142855], [127.0, 30432.25], [126.0, 30334.0], [125.0, 30314.0], [124.0, 30549.5], [135.0, 30319.857142857145], [134.0, 30328.0], [133.0, 30351.0], [132.0, 30348.0], [131.0, 30307.5], [130.0, 30335.0], [129.0, 30265.5], [128.0, 30267.0], [143.0, 30463.333333333332], [142.0, 30383.5], [141.0, 30341.666666666668], [140.0, 30420.0], [139.0, 30580.0], [138.0, 30258.5], [137.0, 30304.0], [136.0, 30398.0], [150.0, 43039.696202531646], [148.0, 60021.0], [147.0, 60025.44], [146.0, 56312.81249999999], [145.0, 46264.91666666666], [144.0, 34214.260869565216], [1.0, 689.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[86.8276810265811, 17942.45554537123]], "isOverall": false, "label": "Generate SSH credential-Aggregated", "isController": false}, {"data": [[6.0, 616.1666666666666], [8.0, 243.0], [10.0, 198.5], [14.0, 660.2857142857142], [16.0, 401.5], [18.0, 220.0], [20.0, 218.58333333333334], [22.0, 289.49999999999994], [24.0, 236.61538461538458], [26.0, 328.1428571428571], [28.0, 325.7272727272727], [30.0, 339.85714285714283], [32.0, 362.0], [33.0, 344.5], [34.0, 296.9230769230769], [36.0, 357.0625], [37.0, 319.0], [38.0, 461.7], [40.0, 587.4166666666666], [42.0, 371.4], [44.0, 337.50000000000006], [46.0, 309.00000000000006], [48.0, 265.8461538461538], [50.0, 411.5882352941176], [52.0, 638.0], [54.0, 690.7333333333335], [56.0, 418.6363636363636], [58.0, 602.4285714285714], [60.0, 579.6363636363636], [61.0, 657.0], [62.0, 591.6470588235293], [64.0, 483.68750000000006], [66.0, 443.7], [65.0, 175.57142857142858], [68.0, 878.0], [70.0, 736.8823529411764], [72.0, 677.8181818181818], [74.0, 616.1], [76.0, 621.7619047619047], [78.0, 549.5833333333334], [77.0, 201.0], [80.0, 784.4210526315791], [82.0, 955.3], [84.0, 910.7272727272727], [86.0, 710.8000000000002], [88.0, 711.3846153846155], [90.0, 810.0], [92.0, 913.6428571428572], [94.0, 1246.3333333333333], [96.0, 661.1111111111111], [97.0, 873.0], [98.0, 886.1176470588234], [100.0, 1024.2666666666667], [101.0, 1025.5294117647059], [102.0, 628.6216216216216], [103.0, 509.99999999999994], [104.0, 1230.0], [105.0, 930.3809523809525], [106.0, 872.2666666666665], [107.0, 651.75], [108.0, 711.6470588235293], [109.0, 859.0833333333333], [110.0, 670.8947368421052], [111.0, 848.4545454545456], [112.0, 638.2142857142859], [113.0, 768.8571428571428], [114.0, 742.1538461538461], [115.0, 548.75], [116.0, 701.0666666666667], [117.0, 448.1666666666667], [118.0, 486.14285714285717], [119.0, 244.0], [120.0, 195.25], [121.0, 185.5], [122.0, 183.5], [123.0, 178.0], [124.0, 180.5], [125.0, 180.5], [126.0, 173.0], [127.0, 182.0], [128.0, 176.66666666666666], [129.0, 214.0], [130.0, 186.0], [131.0, 170.0], [132.0, 202.0], [133.0, 181.0], [134.0, 175.33333333333334], [135.0, 203.0], [136.0, 169.0], [137.0, 186.0], [138.0, 206.0], [139.0, 199.0], [140.0, 176.0], [141.0, 203.33333333333334], [142.0, 168.0], [143.0, 175.33333333333334], [144.0, 229.89655172413805], [145.0, 336.13513513513516], [146.0, 189.83333333333331], [147.0, 224.6538461538461], [148.0, 195.99999999999997], [149.0, 172.0], [150.0, 213.32432432432432], [1.0, 210.0]], "isOverall": false, "label": "Get JWKS", "isController": false}, {"data": [[88.1032906764167, 534.4597806215734]], "isOverall": false, "label": "Get JWKS-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 150.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 603.5666666666667, "minX": 1.65170874E12, "maxY": 37826.566666666666, "series": [{"data": [[1.6517088E12, 8425.583333333334], [1.65170886E12, 5982.6], [1.65170874E12, 37826.566666666666], [1.65170892E12, 982.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6517088E12, 2397.3], [1.65170886E12, 2096.95], [1.65170874E12, 9591.183333333332], [1.65170892E12, 603.5666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170892E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 189.46728971962622, "minX": 1.65170874E12, "maxY": 48751.48529411765, "series": [{"data": [[1.6517088E12, 47225.551136363654], [1.65170886E12, 35632.562162162176], [1.65170874E12, 2048.938066465256], [1.65170892E12, 48751.48529411765]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[1.6517088E12, 241.03296703296692], [1.65170886E12, 189.46728971962622], [1.65170874E12, 650.0538172715901], [1.65170892E12, 194.16666666666666]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65170892E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 189.4485981308411, "minX": 1.65170874E12, "maxY": 48751.47058823529, "series": [{"data": [[1.6517088E12, 47225.511363636346], [1.65170886E12, 35632.52972972969], [1.65170874E12, 2048.891238670694], [1.65170892E12, 48751.47058823529]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[1.6517088E12, 241.0], [1.65170886E12, 189.4485981308411], [1.65170874E12, 649.976220275345], [1.65170892E12, 194.16666666666666]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65170892E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65170874E12, "maxY": 88.86858573216514, "series": [{"data": [[1.6517088E12, 0.0], [1.65170886E12, 0.0], [1.65170874E12, 0.0], [1.65170892E12, 0.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[1.6517088E12, 87.79120879120877], [1.65170886E12, 83.40186915887848], [1.65170874E12, 88.86858573216514], [1.65170892E12, 85.83333333333333]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65170892E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 146.0, "minX": 1.65170874E12, "maxY": 60044.0, "series": [{"data": [[1.6517088E12, 36805.0], [1.65170886E12, 60044.0], [1.65170874E12, 7669.0], [1.65170892E12, 59868.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6517088E12, 467.0], [1.65170886E12, 218.20000000000002], [1.65170874E12, 2937.0], [1.65170892E12, 58755.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6517088E12, 35358.150000000016], [1.65170886E12, 54674.419999999795], [1.65170874E12, 5225.799999999993], [1.65170892E12, 59868.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6517088E12, 33168.0], [1.65170886E12, 273.29999999999995], [1.65170874E12, 3624.1999999999975], [1.65170892E12, 59592.6]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6517088E12, 147.0], [1.65170886E12, 146.0], [1.65170874E12, 152.0], [1.65170892E12, 170.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6517088E12, 207.5], [1.65170886E12, 181.5], [1.65170874E12, 892.0], [1.65170892E12, 25378.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170892E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 171.0, "minX": 1.0, "maxY": 60025.0, "series": [{"data": [[2.0, 176.0], [35.0, 268.0], [34.0, 1393.0], [36.0, 359.0], [40.0, 999.0], [41.0, 1056.0], [43.0, 1309.0], [42.0, 1213.0], [44.0, 714.0], [45.0, 1170.0], [47.0, 2121.0], [48.0, 874.5], [49.0, 706.0], [3.0, 180.5], [51.0, 1198.0], [52.0, 689.5], [53.0, 1018.0], [57.0, 1370.0], [61.0, 828.0], [62.0, 197.0], [64.0, 856.0], [4.0, 171.0], [68.0, 764.0], [5.0, 180.5], [6.0, 342.5], [7.0, 191.0], [9.0, 207.5], [11.0, 239.0], [12.0, 179.0], [13.0, 178.0], [1.0, 184.0], [17.0, 201.0], [19.0, 672.0], [22.0, 177.0], [23.0, 640.0], [25.0, 703.0], [29.0, 178.5], [30.0, 566.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30346.0], [35.0, 60025.0], [36.0, 30599.0], [9.0, 30322.0], [40.0, 60023.0], [11.0, 30285.0], [44.0, 58124.0], [3.0, 30347.0], [12.0, 30449.0], [51.0, 31121.5], [52.0, 33035.5], [13.0, 60021.0], [62.0, 58544.0], [4.0, 30442.0], [1.0, 30348.5], [17.0, 60022.0], [5.0, 30405.0], [22.0, 30389.0], [23.0, 60019.0], [6.0, 45180.5], [7.0, 32221.0], [29.0, 30358.0], [30.0, 60021.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 171.0, "minX": 1.0, "maxY": 60025.0, "series": [{"data": [[2.0, 176.0], [35.0, 268.0], [34.0, 1393.0], [36.0, 359.0], [40.0, 999.0], [41.0, 1056.0], [43.0, 1309.0], [42.0, 1213.0], [44.0, 714.0], [45.0, 1170.0], [47.0, 2121.0], [48.0, 874.5], [49.0, 706.0], [3.0, 180.5], [51.0, 1198.0], [52.0, 689.5], [53.0, 1018.0], [57.0, 1370.0], [61.0, 828.0], [62.0, 197.0], [64.0, 856.0], [4.0, 171.0], [68.0, 764.0], [5.0, 180.5], [6.0, 342.0], [7.0, 191.0], [9.0, 207.5], [11.0, 239.0], [12.0, 179.0], [13.0, 178.0], [1.0, 184.0], [17.0, 201.0], [19.0, 672.0], [22.0, 177.0], [23.0, 639.0], [25.0, 703.0], [29.0, 178.5], [30.0, 566.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 30346.0], [35.0, 60025.0], [36.0, 30599.0], [9.0, 30322.0], [40.0, 60023.0], [11.0, 30285.0], [44.0, 58124.0], [3.0, 30347.0], [12.0, 30449.0], [51.0, 31121.5], [52.0, 33035.5], [13.0, 60021.0], [62.0, 58544.0], [4.0, 30442.0], [1.0, 30348.5], [17.0, 60022.0], [5.0, 30405.0], [22.0, 30389.0], [23.0, 60019.0], [6.0, 45180.5], [7.0, 32221.0], [29.0, 30358.0], [30.0, 60021.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 68.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.15, "minX": 1.65170874E12, "maxY": 26.65, "series": [{"data": [[1.6517088E12, 6.066666666666666], [1.65170886E12, 3.55], [1.65170874E12, 26.65], [1.65170892E12, 0.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170892E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.65170874E12, "maxY": 24.35, "series": [{"data": [[1.6517088E12, 3.2333333333333334], [1.65170886E12, 1.8], [1.65170874E12, 24.35], [1.65170892E12, 0.4166666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.6517088E12, 1.4], [1.65170886E12, 2.5833333333333335], [1.65170892E12, 0.6833333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.65170886E12, 0.1]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.6517088E12, 1.3333333333333333], [1.65170886E12, 0.38333333333333336], [1.65170892E12, 0.13333333333333333]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170892E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65170874E12, "maxY": 13.316666666666666, "series": [{"data": [[1.6517088E12, 3.033333333333333], [1.65170886E12, 1.7833333333333334], [1.65170874E12, 13.316666666666666], [1.65170892E12, 0.1]], "isOverall": false, "label": "Get JWKS-success", "isController": false}, {"data": [[1.6517088E12, 2.7333333333333334], [1.65170886E12, 3.066666666666667], [1.65170892E12, 0.8166666666666667]], "isOverall": false, "label": "Generate SSH credential-failure", "isController": false}, {"data": [[1.6517088E12, 0.2], [1.65170886E12, 0.016666666666666666], [1.65170874E12, 11.033333333333333], [1.65170892E12, 0.31666666666666665]], "isOverall": false, "label": "Generate SSH credential-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65170892E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.65170874E12, "maxY": 24.35, "series": [{"data": [[1.6517088E12, 3.2333333333333334], [1.65170886E12, 1.8], [1.65170874E12, 24.35], [1.65170892E12, 0.4166666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.6517088E12, 2.7333333333333334], [1.65170886E12, 3.066666666666667], [1.65170892E12, 0.8166666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65170892E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

