/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 535.0, "minX": 0.0, "maxY": 90457.0, "series": [{"data": [[0.0, 565.0], [0.1, 565.0], [0.2, 574.0], [0.3, 575.0], [0.4, 576.0], [0.5, 576.0], [0.6, 579.0], [0.7, 587.0], [0.8, 588.0], [0.9, 588.0], [1.0, 588.0], [1.1, 597.0], [1.2, 598.0], [1.3, 598.0], [1.4, 598.0], [1.5, 601.0], [1.6, 601.0], [1.7, 608.0], [1.8, 618.0], [1.9, 618.0], [2.0, 618.0], [2.1, 621.0], [2.2, 622.0], [2.3, 627.0], [2.4, 627.0], [2.5, 627.0], [2.6, 628.0], [2.7, 635.0], [2.8, 635.0], [2.9, 635.0], [3.0, 637.0], [3.1, 639.0], [3.2, 645.0], [3.3, 645.0], [3.4, 647.0], [3.5, 648.0], [3.6, 648.0], [3.7, 651.0], [3.8, 651.0], [3.9, 651.0], [4.0, 651.0], [4.1, 652.0], [4.2, 652.0], [4.3, 652.0], [4.4, 652.0], [4.5, 653.0], [4.6, 655.0], [4.7, 655.0], [4.8, 656.0], [4.9, 658.0], [5.0, 659.0], [5.1, 662.0], [5.2, 662.0], [5.3, 663.0], [5.4, 663.0], [5.5, 664.0], [5.6, 664.0], [5.7, 667.0], [5.8, 668.0], [5.9, 668.0], [6.0, 668.0], [6.1, 668.0], [6.2, 668.0], [6.3, 668.0], [6.4, 669.0], [6.5, 669.0], [6.6, 669.0], [6.7, 669.0], [6.8, 670.0], [6.9, 673.0], [7.0, 673.0], [7.1, 673.0], [7.2, 674.0], [7.3, 674.0], [7.4, 675.0], [7.5, 675.0], [7.6, 675.0], [7.7, 676.0], [7.8, 677.0], [7.9, 679.0], [8.0, 679.0], [8.1, 680.0], [8.2, 684.0], [8.3, 686.0], [8.4, 686.0], [8.5, 692.0], [8.6, 695.0], [8.7, 695.0], [8.8, 697.0], [8.9, 697.0], [9.0, 697.0], [9.1, 698.0], [9.2, 702.0], [9.3, 704.0], [9.4, 704.0], [9.5, 708.0], [9.6, 709.0], [9.7, 709.0], [9.8, 709.0], [9.9, 712.0], [10.0, 712.0], [10.1, 713.0], [10.2, 715.0], [10.3, 715.0], [10.4, 715.0], [10.5, 715.0], [10.6, 715.0], [10.7, 715.0], [10.8, 716.0], [10.9, 717.0], [11.0, 717.0], [11.1, 737.0], [11.2, 737.0], [11.3, 738.0], [11.4, 739.0], [11.5, 754.0], [11.6, 755.0], [11.7, 755.0], [11.8, 759.0], [11.9, 761.0], [12.0, 761.0], [12.1, 761.0], [12.2, 762.0], [12.3, 762.0], [12.4, 762.0], [12.5, 763.0], [12.6, 763.0], [12.7, 763.0], [12.8, 763.0], [12.9, 764.0], [13.0, 768.0], [13.1, 768.0], [13.2, 769.0], [13.3, 770.0], [13.4, 775.0], [13.5, 775.0], [13.6, 783.0], [13.7, 816.0], [13.8, 860.0], [13.9, 868.0], [14.0, 868.0], [14.1, 909.0], [14.2, 917.0], [14.3, 1018.0], [14.4, 1035.0], [14.5, 1035.0], [14.6, 1572.0], [14.7, 1583.0], [14.8, 1650.0], [14.9, 1650.0], [15.0, 1703.0], [15.1, 1722.0], [15.2, 1744.0], [15.3, 1745.0], [15.4, 1745.0], [15.5, 1832.0], [15.6, 1873.0], [15.7, 1884.0], [15.8, 1938.0], [15.9, 1938.0], [16.0, 1951.0], [16.1, 1997.0], [16.2, 2014.0], [16.3, 2014.0], [16.4, 3030.0], [16.5, 3034.0], [16.6, 3039.0], [16.7, 3089.0], [16.8, 3089.0], [16.9, 3090.0], [17.0, 3091.0], [17.1, 3092.0], [17.2, 3092.0], [17.3, 3092.0], [17.4, 3094.0], [17.5, 3796.0], [17.6, 4800.0], [17.7, 4800.0], [17.8, 5694.0], [17.9, 6476.0], [18.0, 8231.0], [18.1, 8519.0], [18.2, 8519.0], [18.3, 8985.0], [18.4, 10547.0], [18.5, 11632.0], [18.6, 12808.0], [18.7, 12808.0], [18.8, 12826.0], [18.9, 13101.0], [19.0, 13731.0], [19.1, 13731.0], [19.2, 14132.0], [19.3, 14268.0], [19.4, 14284.0], [19.5, 14683.0], [19.6, 14683.0], [19.7, 14999.0], [19.8, 15001.0], [19.9, 15317.0], [20.0, 15317.0], [20.1, 15518.0], [20.2, 15525.0], [20.3, 15699.0], [20.4, 15763.0], [20.5, 15763.0], [20.6, 15805.0], [20.7, 15902.0], [20.8, 15942.0], [20.9, 16141.0], [21.0, 16141.0], [21.1, 16343.0], [21.2, 16476.0], [21.3, 16505.0], [21.4, 16505.0], [21.5, 16518.0], [21.6, 16543.0], [21.7, 16691.0], [21.8, 16878.0], [21.9, 16878.0], [22.0, 16972.0], [22.1, 17180.0], [22.2, 17292.0], [22.3, 17308.0], [22.4, 17308.0], [22.5, 17392.0], [22.6, 17411.0], [22.7, 17533.0], [22.8, 17533.0], [22.9, 17632.0], [23.0, 17677.0], [23.1, 17882.0], [23.2, 18040.0], [23.3, 18040.0], [23.4, 18050.0], [23.5, 18127.0], [23.6, 18176.0], [23.7, 18198.0], [23.8, 18198.0], [23.9, 18289.0], [24.0, 18473.0], [24.1, 18572.0], [24.2, 18572.0], [24.3, 18592.0], [24.4, 18613.0], [24.5, 18645.0], [24.6, 18973.0], [24.7, 18973.0], [24.8, 19284.0], [24.9, 19363.0], [25.0, 19424.0], [25.1, 19610.0], [25.2, 19610.0], [25.3, 19643.0], [25.4, 19663.0], [25.5, 19802.0], [25.6, 19802.0], [25.7, 19826.0], [25.8, 19875.0], [25.9, 20009.0], [26.0, 20177.0], [26.1, 20177.0], [26.2, 20185.0], [26.3, 20192.0], [26.4, 20233.0], [26.5, 20266.0], [26.6, 20266.0], [26.7, 20272.0], [26.8, 20367.0], [26.9, 20632.0], [27.0, 20632.0], [27.1, 20723.0], [27.2, 20814.0], [27.3, 20863.0], [27.4, 20907.0], [27.5, 20907.0], [27.6, 20943.0], [27.7, 20991.0], [27.8, 21028.0], [27.9, 21054.0], [28.0, 21054.0], [28.1, 21060.0], [28.2, 21139.0], [28.3, 21151.0], [28.4, 21151.0], [28.5, 21176.0], [28.6, 21244.0], [28.7, 21250.0], [28.8, 21398.0], [28.9, 21398.0], [29.0, 21409.0], [29.1, 21459.0], [29.2, 21513.0], [29.3, 21519.0], [29.4, 21519.0], [29.5, 21604.0], [29.6, 21611.0], [29.7, 21890.0], [29.8, 21890.0], [29.9, 21960.0], [30.0, 21976.0], [30.1, 22041.0], [30.2, 22135.0], [30.3, 22135.0], [30.4, 22218.0], [30.5, 22245.0], [30.6, 22285.0], [30.7, 22285.0], [30.8, 22422.0], [30.9, 22431.0], [31.0, 22481.0], [31.1, 22485.0], [31.2, 22485.0], [31.3, 22543.0], [31.4, 22560.0], [31.5, 22583.0], [31.6, 22630.0], [31.7, 22630.0], [31.8, 22631.0], [31.9, 22653.0], [32.0, 22819.0], [32.1, 22819.0], [32.2, 22921.0], [32.3, 22938.0], [32.4, 22961.0], [32.5, 22984.0], [32.6, 22984.0], [32.7, 22986.0], [32.8, 23061.0], [32.9, 23094.0], [33.0, 23176.0], [33.1, 23176.0], [33.2, 23208.0], [33.3, 23370.0], [33.4, 23374.0], [33.5, 23374.0], [33.6, 23395.0], [33.7, 23503.0], [33.8, 23586.0], [33.9, 23603.0], [34.0, 23603.0], [34.1, 23727.0], [34.2, 23763.0], [34.3, 23856.0], [34.4, 23954.0], [34.5, 23954.0], [34.6, 23957.0], [34.7, 24005.0], [34.8, 24037.0], [34.9, 24037.0], [35.0, 24117.0], [35.1, 24150.0], [35.2, 24191.0], [35.3, 24201.0], [35.4, 24201.0], [35.5, 24331.0], [35.6, 24392.0], [35.7, 24415.0], [35.8, 24446.0], [35.9, 24446.0], [36.0, 24515.0], [36.1, 24552.0], [36.2, 24651.0], [36.3, 24651.0], [36.4, 24675.0], [36.5, 24730.0], [36.6, 24733.0], [36.7, 24753.0], [36.8, 24753.0], [36.9, 24939.0], [37.0, 25325.0], [37.1, 25339.0], [37.2, 25423.0], [37.3, 25423.0], [37.4, 25445.0], [37.5, 25458.0], [37.6, 25649.0], [37.7, 25649.0], [37.8, 25743.0], [37.9, 25752.0], [38.0, 25933.0], [38.1, 25992.0], [38.2, 25992.0], [38.3, 26040.0], [38.4, 26280.0], [38.5, 26325.0], [38.6, 26451.0], [38.7, 26451.0], [38.8, 26469.0], [38.9, 26722.0], [39.0, 26843.0], [39.1, 26843.0], [39.2, 26889.0], [39.3, 26984.0], [39.4, 27245.0], [39.5, 27275.0], [39.6, 27275.0], [39.7, 27320.0], [39.8, 27421.0], [39.9, 27454.0], [40.0, 27454.0], [40.1, 27563.0], [40.2, 27617.0], [40.3, 27715.0], [40.4, 27861.0], [40.5, 27861.0], [40.6, 27936.0], [40.7, 28072.0], [40.8, 28083.0], [40.9, 28086.0], [41.0, 28086.0], [41.1, 28284.0], [41.2, 28356.0], [41.3, 28391.0], [41.4, 28391.0], [41.5, 28398.0], [41.6, 28898.0], [41.7, 28996.0], [41.8, 29325.0], [41.9, 29325.0], [42.0, 29428.0], [42.1, 29445.0], [42.2, 29512.0], [42.3, 29597.0], [42.4, 29597.0], [42.5, 29677.0], [42.6, 29680.0], [42.7, 29713.0], [42.8, 29713.0], [42.9, 29746.0], [43.0, 29761.0], [43.1, 29792.0], [43.2, 29876.0], [43.3, 29876.0], [43.4, 30116.0], [43.5, 30223.0], [43.6, 30260.0], [43.7, 30385.0], [43.8, 30385.0], [43.9, 30829.0], [44.0, 30868.0], [44.1, 31040.0], [44.2, 31040.0], [44.3, 31442.0], [44.4, 31749.0], [44.5, 31959.0], [44.6, 31992.0], [44.7, 31992.0], [44.8, 32530.0], [44.9, 32663.0], [45.0, 33043.0], [45.1, 34793.0], [45.2, 34793.0], [45.3, 36013.0], [45.4, 36091.0], [45.5, 47632.0], [45.6, 47632.0], [45.7, 50529.0], [45.8, 50720.0], [45.9, 51904.0], [46.0, 52967.0], [46.1, 52967.0], [46.2, 53334.0], [46.3, 53341.0], [46.4, 53378.0], [46.5, 53937.0], [46.6, 53937.0], [46.7, 54705.0], [46.8, 54843.0], [46.9, 55292.0], [47.0, 55292.0], [47.1, 55516.0], [47.2, 55572.0], [47.3, 56371.0], [47.4, 56371.0], [47.5, 56371.0], [47.6, 56402.0], [47.7, 56608.0], [47.8, 57586.0], [47.9, 57907.0], [48.0, 57907.0], [48.1, 57956.0], [48.2, 58462.0], [48.3, 58945.0], [48.4, 58945.0], [48.5, 59252.0], [48.6, 59252.0], [48.7, 59451.0], [48.8, 59776.0], [48.9, 59776.0], [49.0, 59849.0], [49.1, 59965.0], [49.2, 60007.0], [49.3, 60016.0], [49.4, 60016.0], [49.5, 60016.0], [49.6, 60017.0], [49.7, 60017.0], [49.8, 60017.0], [49.9, 60017.0], [50.0, 60017.0], [50.1, 60017.0], [50.2, 60017.0], [50.3, 60017.0], [50.4, 60017.0], [50.5, 60017.0], [50.6, 60017.0], [50.7, 60017.0], [50.8, 60017.0], [50.9, 60018.0], [51.0, 60018.0], [51.1, 60018.0], [51.2, 60018.0], [51.3, 60018.0], [51.4, 60018.0], [51.5, 60018.0], [51.6, 60018.0], [51.7, 60018.0], [51.8, 60018.0], [51.9, 60018.0], [52.0, 60018.0], [52.1, 60018.0], [52.2, 60018.0], [52.3, 60018.0], [52.4, 60018.0], [52.5, 60018.0], [52.6, 60018.0], [52.7, 60018.0], [52.8, 60018.0], [52.9, 60018.0], [53.0, 60018.0], [53.1, 60018.0], [53.2, 60018.0], [53.3, 60019.0], [53.4, 60019.0], [53.5, 60019.0], [53.6, 60019.0], [53.7, 60019.0], [53.8, 60019.0], [53.9, 60019.0], [54.0, 60019.0], [54.1, 60019.0], [54.2, 60019.0], [54.3, 60019.0], [54.4, 60019.0], [54.5, 60019.0], [54.6, 60019.0], [54.7, 60019.0], [54.8, 60019.0], [54.9, 60019.0], [55.0, 60019.0], [55.1, 60019.0], [55.2, 60019.0], [55.3, 60019.0], [55.4, 60019.0], [55.5, 60019.0], [55.6, 60019.0], [55.7, 60019.0], [55.8, 60019.0], [55.9, 60019.0], [56.0, 60019.0], [56.1, 60019.0], [56.2, 60019.0], [56.3, 60019.0], [56.4, 60019.0], [56.5, 60019.0], [56.6, 60020.0], [56.7, 60020.0], [56.8, 60020.0], [56.9, 60020.0], [57.0, 60020.0], [57.1, 60020.0], [57.2, 60020.0], [57.3, 60020.0], [57.4, 60020.0], [57.5, 60020.0], [57.6, 60020.0], [57.7, 60020.0], [57.8, 60020.0], [57.9, 60020.0], [58.0, 60020.0], [58.1, 60020.0], [58.2, 60020.0], [58.3, 60020.0], [58.4, 60020.0], [58.5, 60020.0], [58.6, 60020.0], [58.7, 60020.0], [58.8, 60020.0], [58.9, 60020.0], [59.0, 60020.0], [59.1, 60020.0], [59.2, 60020.0], [59.3, 60020.0], [59.4, 60020.0], [59.5, 60020.0], [59.6, 60020.0], [59.7, 60020.0], [59.8, 60020.0], [59.9, 60020.0], [60.0, 60020.0], [60.1, 60020.0], [60.2, 60020.0], [60.3, 60020.0], [60.4, 60020.0], [60.5, 60020.0], [60.6, 60020.0], [60.7, 60020.0], [60.8, 60020.0], [60.9, 60020.0], [61.0, 60020.0], [61.1, 60020.0], [61.2, 60020.0], [61.3, 60020.0], [61.4, 60020.0], [61.5, 60020.0], [61.6, 60020.0], [61.7, 60020.0], [61.8, 60020.0], [61.9, 60020.0], [62.0, 60020.0], [62.1, 60021.0], [62.2, 60021.0], [62.3, 60021.0], [62.4, 60021.0], [62.5, 60021.0], [62.6, 60021.0], [62.7, 60021.0], [62.8, 60021.0], [62.9, 60021.0], [63.0, 60021.0], [63.1, 60021.0], [63.2, 60021.0], [63.3, 60021.0], [63.4, 60021.0], [63.5, 60021.0], [63.6, 60021.0], [63.7, 60021.0], [63.8, 60021.0], [63.9, 60021.0], [64.0, 60021.0], [64.1, 60021.0], [64.2, 60021.0], [64.3, 60021.0], [64.4, 60021.0], [64.5, 60021.0], [64.6, 60021.0], [64.7, 60021.0], [64.8, 60021.0], [64.9, 60021.0], [65.0, 60021.0], [65.1, 60021.0], [65.2, 60021.0], [65.3, 60021.0], [65.4, 60021.0], [65.5, 60021.0], [65.6, 60021.0], [65.7, 60021.0], [65.8, 60021.0], [65.9, 60021.0], [66.0, 60021.0], [66.1, 60021.0], [66.2, 60021.0], [66.3, 60021.0], [66.4, 60021.0], [66.5, 60021.0], [66.6, 60021.0], [66.7, 60021.0], [66.8, 60021.0], [66.9, 60021.0], [67.0, 60021.0], [67.1, 60021.0], [67.2, 60022.0], [67.3, 60022.0], [67.4, 60022.0], [67.5, 60022.0], [67.6, 60022.0], [67.7, 60022.0], [67.8, 60022.0], [67.9, 60022.0], [68.0, 60022.0], [68.1, 60022.0], [68.2, 60022.0], [68.3, 60022.0], [68.4, 60022.0], [68.5, 60022.0], [68.6, 60022.0], [68.7, 60022.0], [68.8, 60022.0], [68.9, 60022.0], [69.0, 60022.0], [69.1, 60022.0], [69.2, 60022.0], [69.3, 60022.0], [69.4, 60022.0], [69.5, 60022.0], [69.6, 60022.0], [69.7, 60022.0], [69.8, 60022.0], [69.9, 60022.0], [70.0, 60022.0], [70.1, 60022.0], [70.2, 60022.0], [70.3, 60022.0], [70.4, 60022.0], [70.5, 60022.0], [70.6, 60022.0], [70.7, 60022.0], [70.8, 60022.0], [70.9, 60022.0], [71.0, 60022.0], [71.1, 60022.0], [71.2, 60022.0], [71.3, 60022.0], [71.4, 60022.0], [71.5, 60023.0], [71.6, 60023.0], [71.7, 60023.0], [71.8, 60023.0], [71.9, 60023.0], [72.0, 60023.0], [72.1, 60023.0], [72.2, 60023.0], [72.3, 60023.0], [72.4, 60023.0], [72.5, 60023.0], [72.6, 60023.0], [72.7, 60023.0], [72.8, 60023.0], [72.9, 60023.0], [73.0, 60023.0], [73.1, 60023.0], [73.2, 60023.0], [73.3, 60023.0], [73.4, 60023.0], [73.5, 60023.0], [73.6, 60023.0], [73.7, 60023.0], [73.8, 60023.0], [73.9, 60023.0], [74.0, 60023.0], [74.1, 60023.0], [74.2, 60024.0], [74.3, 60024.0], [74.4, 60024.0], [74.5, 60024.0], [74.6, 60024.0], [74.7, 60024.0], [74.8, 60024.0], [74.9, 60024.0], [75.0, 60024.0], [75.1, 60024.0], [75.2, 60024.0], [75.3, 60024.0], [75.4, 60024.0], [75.5, 60024.0], [75.6, 60024.0], [75.7, 60024.0], [75.8, 60024.0], [75.9, 60024.0], [76.0, 60024.0], [76.1, 60024.0], [76.2, 60024.0], [76.3, 60024.0], [76.4, 60024.0], [76.5, 60025.0], [76.6, 60025.0], [76.7, 60025.0], [76.8, 60025.0], [76.9, 60025.0], [77.0, 60025.0], [77.1, 60025.0], [77.2, 60026.0], [77.3, 60026.0], [77.4, 60026.0], [77.5, 60026.0], [77.6, 60026.0], [77.7, 60026.0], [77.8, 60026.0], [77.9, 60026.0], [78.0, 60027.0], [78.1, 60028.0], [78.2, 60028.0], [78.3, 60028.0], [78.4, 60028.0], [78.5, 60029.0], [78.6, 60029.0], [78.7, 60029.0], [78.8, 60029.0], [78.9, 60029.0], [79.0, 60030.0], [79.1, 60030.0], [79.2, 60030.0], [79.3, 60030.0], [79.4, 60030.0], [79.5, 60030.0], [79.6, 60030.0], [79.7, 60030.0], [79.8, 60031.0], [79.9, 60031.0], [80.0, 60031.0], [80.1, 60032.0], [80.2, 60032.0], [80.3, 60033.0], [80.4, 60033.0], [80.5, 60033.0], [80.6, 60035.0], [80.7, 60035.0], [80.8, 60035.0], [80.9, 60036.0], [81.0, 60036.0], [81.1, 60036.0], [81.2, 60036.0], [81.3, 60036.0], [81.4, 60036.0], [81.5, 60037.0], [81.6, 60037.0], [81.7, 60037.0], [81.8, 60037.0], [81.9, 60037.0], [82.0, 60037.0], [82.1, 60037.0], [82.2, 60037.0], [82.3, 60038.0], [82.4, 60038.0], [82.5, 60038.0], [82.6, 60038.0], [82.7, 60038.0], [82.8, 60038.0], [82.9, 60038.0], [83.0, 60038.0], [83.1, 60039.0], [83.2, 60039.0], [83.3, 60039.0], [83.4, 60039.0], [83.5, 60040.0], [83.6, 60040.0], [83.7, 60040.0], [83.8, 60040.0], [83.9, 60040.0], [84.0, 60040.0], [84.1, 60041.0], [84.2, 60041.0], [84.3, 60041.0], [84.4, 60041.0], [84.5, 60041.0], [84.6, 60041.0], [84.7, 60041.0], [84.8, 60041.0], [84.9, 60041.0], [85.0, 60041.0], [85.1, 60042.0], [85.2, 60042.0], [85.3, 60042.0], [85.4, 60043.0], [85.5, 60044.0], [85.6, 60044.0], [85.7, 60044.0], [85.8, 60045.0], [85.9, 60046.0], [86.0, 60046.0], [86.1, 60046.0], [86.2, 60046.0], [86.3, 60047.0], [86.4, 60047.0], [86.5, 60047.0], [86.6, 60047.0], [86.7, 60047.0], [86.8, 60048.0], [86.9, 60048.0], [87.0, 60048.0], [87.1, 60048.0], [87.2, 60048.0], [87.3, 60049.0], [87.4, 60049.0], [87.5, 60049.0], [87.6, 60050.0], [87.7, 60050.0], [87.8, 60051.0], [87.9, 60051.0], [88.0, 60051.0], [88.1, 60051.0], [88.2, 60051.0], [88.3, 60052.0], [88.4, 60052.0], [88.5, 60052.0], [88.6, 60053.0], [88.7, 60053.0], [88.8, 60054.0], [88.9, 60054.0], [89.0, 60054.0], [89.1, 60054.0], [89.2, 60056.0], [89.3, 60057.0], [89.4, 60057.0], [89.5, 60058.0], [89.6, 60060.0], [89.7, 60060.0], [89.8, 60060.0], [89.9, 60060.0], [90.0, 60061.0], [90.1, 60061.0], [90.2, 60063.0], [90.3, 60063.0], [90.4, 60064.0], [90.5, 60064.0], [90.6, 60065.0], [90.7, 60065.0], [90.8, 60065.0], [90.9, 60065.0], [91.0, 60067.0], [91.1, 60068.0], [91.2, 60068.0], [91.3, 60070.0], [91.4, 60075.0], [91.5, 60078.0], [91.6, 60087.0], [91.7, 60087.0], [91.8, 60088.0], [91.9, 60089.0], [92.0, 60090.0], [92.1, 60090.0], [92.2, 60095.0], [92.3, 60096.0], [92.4, 60096.0], [92.5, 60101.0], [92.6, 60101.0], [92.7, 60101.0], [92.8, 60101.0], [92.9, 60101.0], [93.0, 60101.0], [93.1, 60101.0], [93.2, 60105.0], [93.3, 60108.0], [93.4, 60109.0], [93.5, 60109.0], [93.6, 60109.0], [93.7, 60109.0], [93.8, 60110.0], [93.9, 60111.0], [94.0, 60111.0], [94.1, 60111.0], [94.2, 60113.0], [94.3, 60113.0], [94.4, 60114.0], [94.5, 60114.0], [94.6, 60116.0], [94.7, 60116.0], [94.8, 60117.0], [94.9, 60117.0], [95.0, 60119.0], [95.1, 60122.0], [95.2, 60127.0], [95.3, 60127.0], [95.4, 60127.0], [95.5, 60128.0], [95.6, 61121.0], [95.7, 61130.0], [95.8, 61133.0], [95.9, 61133.0], [96.0, 61136.0], [96.1, 61148.0], [96.2, 61335.0], [96.3, 61335.0], [96.4, 61376.0], [96.5, 61376.0], [96.6, 61384.0], [96.7, 61516.0], [96.8, 61516.0], [96.9, 61517.0], [97.0, 61530.0], [97.1, 61541.0], [97.2, 61546.0], [97.3, 61546.0], [97.4, 61546.0], [97.5, 61549.0], [97.6, 61551.0], [97.7, 61551.0], [97.8, 61626.0], [97.9, 65862.0], [98.0, 75260.0], [98.1, 75608.0], [98.2, 75608.0], [98.3, 78567.0], [98.4, 84242.0], [98.5, 85631.0], [98.6, 85667.0], [98.7, 85667.0], [98.8, 85931.0], [98.9, 86722.0], [99.0, 88679.0], [99.1, 88679.0], [99.2, 89158.0], [99.3, 89226.0], [99.4, 89676.0], [99.5, 89701.0], [99.6, 89701.0], [99.7, 89706.0], [99.8, 90253.0], [99.9, 90457.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[0.0, 535.0], [0.1, 542.0], [0.2, 543.0], [0.3, 544.0], [0.4, 554.0], [0.5, 558.0], [0.6, 563.0], [0.7, 564.0], [0.8, 567.0], [0.9, 569.0], [1.0, 569.0], [1.1, 570.0], [1.2, 572.0], [1.3, 572.0], [1.4, 573.0], [1.5, 573.0], [1.6, 576.0], [1.7, 576.0], [1.8, 578.0], [1.9, 580.0], [2.0, 584.0], [2.1, 585.0], [2.2, 586.0], [2.3, 586.0], [2.4, 588.0], [2.5, 589.0], [2.6, 590.0], [2.7, 594.0], [2.8, 594.0], [2.9, 596.0], [3.0, 599.0], [3.1, 599.0], [3.2, 599.0], [3.3, 602.0], [3.4, 605.0], [3.5, 607.0], [3.6, 607.0], [3.7, 607.0], [3.8, 608.0], [3.9, 608.0], [4.0, 610.0], [4.1, 610.0], [4.2, 610.0], [4.3, 611.0], [4.4, 611.0], [4.5, 611.0], [4.6, 612.0], [4.7, 612.0], [4.8, 612.0], [4.9, 614.0], [5.0, 614.0], [5.1, 615.0], [5.2, 615.0], [5.3, 615.0], [5.4, 616.0], [5.5, 619.0], [5.6, 624.0], [5.7, 625.0], [5.8, 628.0], [5.9, 628.0], [6.0, 628.0], [6.1, 630.0], [6.2, 631.0], [6.3, 631.0], [6.4, 633.0], [6.5, 633.0], [6.6, 633.0], [6.7, 633.0], [6.8, 634.0], [6.9, 635.0], [7.0, 635.0], [7.1, 636.0], [7.2, 637.0], [7.3, 643.0], [7.4, 644.0], [7.5, 649.0], [7.6, 651.0], [7.7, 652.0], [7.8, 653.0], [7.9, 657.0], [8.0, 658.0], [8.1, 660.0], [8.2, 660.0], [8.3, 660.0], [8.4, 660.0], [8.5, 660.0], [8.6, 661.0], [8.7, 662.0], [8.8, 662.0], [8.9, 662.0], [9.0, 662.0], [9.1, 663.0], [9.2, 664.0], [9.3, 664.0], [9.4, 665.0], [9.5, 666.0], [9.6, 667.0], [9.7, 671.0], [9.8, 677.0], [9.9, 679.0], [10.0, 680.0], [10.1, 682.0], [10.2, 693.0], [10.3, 705.0], [10.4, 706.0], [10.5, 707.0], [10.6, 707.0], [10.7, 708.0], [10.8, 708.0], [10.9, 708.0], [11.0, 710.0], [11.1, 712.0], [11.2, 713.0], [11.3, 713.0], [11.4, 714.0], [11.5, 714.0], [11.6, 715.0], [11.7, 722.0], [11.8, 722.0], [11.9, 725.0], [12.0, 740.0], [12.1, 757.0], [12.2, 764.0], [12.3, 788.0], [12.4, 805.0], [12.5, 805.0], [12.6, 806.0], [12.7, 811.0], [12.8, 837.0], [12.9, 838.0], [13.0, 843.0], [13.1, 844.0], [13.2, 846.0], [13.3, 848.0], [13.4, 850.0], [13.5, 851.0], [13.6, 854.0], [13.7, 854.0], [13.8, 858.0], [13.9, 883.0], [14.0, 886.0], [14.1, 892.0], [14.2, 897.0], [14.3, 897.0], [14.4, 899.0], [14.5, 901.0], [14.6, 902.0], [14.7, 904.0], [14.8, 908.0], [14.9, 908.0], [15.0, 927.0], [15.1, 931.0], [15.2, 942.0], [15.3, 944.0], [15.4, 951.0], [15.5, 956.0], [15.6, 957.0], [15.7, 964.0], [15.8, 977.0], [15.9, 980.0], [16.0, 984.0], [16.1, 989.0], [16.2, 989.0], [16.3, 989.0], [16.4, 995.0], [16.5, 1010.0], [16.6, 1014.0], [16.7, 1017.0], [16.8, 1024.0], [16.9, 1028.0], [17.0, 1030.0], [17.1, 1032.0], [17.2, 1033.0], [17.3, 1034.0], [17.4, 1044.0], [17.5, 1048.0], [17.6, 1057.0], [17.7, 1057.0], [17.8, 1058.0], [17.9, 1061.0], [18.0, 1061.0], [18.1, 1091.0], [18.2, 1096.0], [18.3, 1099.0], [18.4, 1107.0], [18.5, 1107.0], [18.6, 1110.0], [18.7, 1116.0], [18.8, 1119.0], [18.9, 1131.0], [19.0, 1131.0], [19.1, 1134.0], [19.2, 1140.0], [19.3, 1149.0], [19.4, 1155.0], [19.5, 1159.0], [19.6, 1161.0], [19.7, 1171.0], [19.8, 1172.0], [19.9, 1183.0], [20.0, 1184.0], [20.1, 1186.0], [20.2, 1192.0], [20.3, 1196.0], [20.4, 1207.0], [20.5, 1214.0], [20.6, 1215.0], [20.7, 1220.0], [20.8, 1224.0], [20.9, 1227.0], [21.0, 1230.0], [21.1, 1231.0], [21.2, 1232.0], [21.3, 1261.0], [21.4, 1273.0], [21.5, 1274.0], [21.6, 1277.0], [21.7, 1284.0], [21.8, 1313.0], [21.9, 1313.0], [22.0, 1321.0], [22.1, 1357.0], [22.2, 1378.0], [22.3, 1388.0], [22.4, 1393.0], [22.5, 1399.0], [22.6, 1400.0], [22.7, 1417.0], [22.8, 1436.0], [22.9, 1445.0], [23.0, 1455.0], [23.1, 1459.0], [23.2, 1463.0], [23.3, 1464.0], [23.4, 1486.0], [23.5, 1494.0], [23.6, 1500.0], [23.7, 1506.0], [23.8, 1508.0], [23.9, 1511.0], [24.0, 1523.0], [24.1, 1535.0], [24.2, 1536.0], [24.3, 1541.0], [24.4, 1541.0], [24.5, 1542.0], [24.6, 1542.0], [24.7, 1543.0], [24.8, 1546.0], [24.9, 1551.0], [25.0, 1557.0], [25.1, 1563.0], [25.2, 1591.0], [25.3, 1595.0], [25.4, 1597.0], [25.5, 1609.0], [25.6, 1611.0], [25.7, 1614.0], [25.8, 1640.0], [25.9, 1643.0], [26.0, 1676.0], [26.1, 1685.0], [26.2, 1692.0], [26.3, 1702.0], [26.4, 1704.0], [26.5, 1704.0], [26.6, 1750.0], [26.7, 1783.0], [26.8, 1809.0], [26.9, 1826.0], [27.0, 1835.0], [27.1, 1878.0], [27.2, 1890.0], [27.3, 1900.0], [27.4, 1903.0], [27.5, 1904.0], [27.6, 1974.0], [27.7, 2001.0], [27.8, 2003.0], [27.9, 2019.0], [28.0, 2024.0], [28.1, 2042.0], [28.2, 2059.0], [28.3, 2073.0], [28.4, 2138.0], [28.5, 2145.0], [28.6, 2154.0], [28.7, 2169.0], [28.8, 2173.0], [28.9, 2189.0], [29.0, 2194.0], [29.1, 2199.0], [29.2, 2224.0], [29.3, 2232.0], [29.4, 2237.0], [29.5, 2240.0], [29.6, 2245.0], [29.7, 2256.0], [29.8, 2259.0], [29.9, 2286.0], [30.0, 2294.0], [30.1, 2309.0], [30.2, 2313.0], [30.3, 2313.0], [30.4, 2315.0], [30.5, 2321.0], [30.6, 2354.0], [30.7, 2359.0], [30.8, 2377.0], [30.9, 2380.0], [31.0, 2419.0], [31.1, 2440.0], [31.2, 2446.0], [31.3, 2451.0], [31.4, 2452.0], [31.5, 2476.0], [31.6, 2488.0], [31.7, 2509.0], [31.8, 2511.0], [31.9, 2526.0], [32.0, 2537.0], [32.1, 2565.0], [32.2, 2571.0], [32.3, 2577.0], [32.4, 2578.0], [32.5, 2589.0], [32.6, 2600.0], [32.7, 2602.0], [32.8, 2609.0], [32.9, 2615.0], [33.0, 2622.0], [33.1, 2627.0], [33.2, 2653.0], [33.3, 2653.0], [33.4, 2659.0], [33.5, 2663.0], [33.6, 2684.0], [33.7, 2688.0], [33.8, 2709.0], [33.9, 2732.0], [34.0, 2740.0], [34.1, 2768.0], [34.2, 2850.0], [34.3, 2863.0], [34.4, 2867.0], [34.5, 2868.0], [34.6, 2941.0], [34.7, 2951.0], [34.8, 2999.0], [34.9, 3018.0], [35.0, 3019.0], [35.1, 3034.0], [35.2, 3044.0], [35.3, 3045.0], [35.4, 3061.0], [35.5, 3077.0], [35.6, 3087.0], [35.7, 3089.0], [35.8, 3102.0], [35.9, 3183.0], [36.0, 3226.0], [36.1, 3233.0], [36.2, 3244.0], [36.3, 3277.0], [36.4, 3285.0], [36.5, 3324.0], [36.6, 3331.0], [36.7, 3361.0], [36.8, 3364.0], [36.9, 3366.0], [37.0, 3371.0], [37.1, 3375.0], [37.2, 3438.0], [37.3, 3500.0], [37.4, 3500.0], [37.5, 3510.0], [37.6, 3544.0], [37.7, 3546.0], [37.8, 3574.0], [37.9, 3592.0], [38.0, 3594.0], [38.1, 3609.0], [38.2, 3673.0], [38.3, 3676.0], [38.4, 3756.0], [38.5, 3768.0], [38.6, 3806.0], [38.7, 3816.0], [38.8, 3829.0], [38.9, 3902.0], [39.0, 3995.0], [39.1, 4013.0], [39.2, 4024.0], [39.3, 4027.0], [39.4, 4085.0], [39.5, 4147.0], [39.6, 4154.0], [39.7, 4170.0], [39.8, 4175.0], [39.9, 4203.0], [40.0, 4225.0], [40.1, 4252.0], [40.2, 4316.0], [40.3, 4320.0], [40.4, 4354.0], [40.5, 4359.0], [40.6, 4494.0], [40.7, 4553.0], [40.8, 4558.0], [40.9, 4573.0], [41.0, 4605.0], [41.1, 4674.0], [41.2, 4678.0], [41.3, 4707.0], [41.4, 4712.0], [41.5, 4719.0], [41.6, 4778.0], [41.7, 4885.0], [41.8, 4948.0], [41.9, 4967.0], [42.0, 5013.0], [42.1, 5022.0], [42.2, 5023.0], [42.3, 5044.0], [42.4, 5095.0], [42.5, 5102.0], [42.6, 5152.0], [42.7, 5227.0], [42.8, 5237.0], [42.9, 5267.0], [43.0, 5290.0], [43.1, 5296.0], [43.2, 5303.0], [43.3, 5340.0], [43.4, 5356.0], [43.5, 5434.0], [43.6, 5459.0], [43.7, 5461.0], [43.8, 5482.0], [43.9, 5504.0], [44.0, 5516.0], [44.1, 5536.0], [44.2, 5541.0], [44.3, 5620.0], [44.4, 5643.0], [44.5, 5736.0], [44.6, 5745.0], [44.7, 5755.0], [44.8, 5794.0], [44.9, 5896.0], [45.0, 5955.0], [45.1, 5955.0], [45.2, 5978.0], [45.3, 5989.0], [45.4, 6007.0], [45.5, 6051.0], [45.6, 6067.0], [45.7, 6125.0], [45.8, 6130.0], [45.9, 6204.0], [46.0, 6205.0], [46.1, 6241.0], [46.2, 6308.0], [46.3, 6319.0], [46.4, 6328.0], [46.5, 6340.0], [46.6, 6384.0], [46.7, 6394.0], [46.8, 6414.0], [46.9, 6472.0], [47.0, 6477.0], [47.1, 6493.0], [47.2, 6511.0], [47.3, 6605.0], [47.4, 6615.0], [47.5, 6633.0], [47.6, 6667.0], [47.7, 6673.0], [47.8, 6674.0], [47.9, 6709.0], [48.0, 6753.0], [48.1, 6789.0], [48.2, 6796.0], [48.3, 6852.0], [48.4, 6929.0], [48.5, 7015.0], [48.6, 7022.0], [48.7, 7044.0], [48.8, 7072.0], [48.9, 7127.0], [49.0, 7130.0], [49.1, 7133.0], [49.2, 7175.0], [49.3, 7197.0], [49.4, 7240.0], [49.5, 7253.0], [49.6, 7340.0], [49.7, 7365.0], [49.8, 7372.0], [49.9, 7401.0], [50.0, 7442.0], [50.1, 7489.0], [50.2, 7511.0], [50.3, 7536.0], [50.4, 7635.0], [50.5, 7713.0], [50.6, 7724.0], [50.7, 7796.0], [50.8, 7808.0], [50.9, 7821.0], [51.0, 7834.0], [51.1, 7879.0], [51.2, 7912.0], [51.3, 7941.0], [51.4, 7965.0], [51.5, 7985.0], [51.6, 7992.0], [51.7, 8001.0], [51.8, 8028.0], [51.9, 8049.0], [52.0, 8056.0], [52.1, 8072.0], [52.2, 8089.0], [52.3, 8095.0], [52.4, 8132.0], [52.5, 8196.0], [52.6, 8208.0], [52.7, 8275.0], [52.8, 8320.0], [52.9, 8323.0], [53.0, 8377.0], [53.1, 8388.0], [53.2, 8389.0], [53.3, 8401.0], [53.4, 8462.0], [53.5, 8477.0], [53.6, 8489.0], [53.7, 8520.0], [53.8, 8599.0], [53.9, 8643.0], [54.0, 8708.0], [54.1, 8737.0], [54.2, 8743.0], [54.3, 8765.0], [54.4, 8776.0], [54.5, 8793.0], [54.6, 8808.0], [54.7, 8843.0], [54.8, 8844.0], [54.9, 8870.0], [55.0, 8878.0], [55.1, 8894.0], [55.2, 8993.0], [55.3, 9015.0], [55.4, 9022.0], [55.5, 9058.0], [55.6, 9062.0], [55.7, 9066.0], [55.8, 9069.0], [55.9, 9096.0], [56.0, 9279.0], [56.1, 9312.0], [56.2, 9323.0], [56.3, 9352.0], [56.4, 9359.0], [56.5, 9373.0], [56.6, 9405.0], [56.7, 9519.0], [56.8, 9538.0], [56.9, 9591.0], [57.0, 9625.0], [57.1, 9642.0], [57.2, 9643.0], [57.3, 9644.0], [57.4, 9667.0], [57.5, 9763.0], [57.6, 9781.0], [57.7, 9818.0], [57.8, 9837.0], [57.9, 9843.0], [58.0, 9853.0], [58.1, 9870.0], [58.2, 9885.0], [58.3, 9923.0], [58.4, 9954.0], [58.5, 9958.0], [58.6, 10005.0], [58.7, 10008.0], [58.8, 10028.0], [58.9, 10035.0], [59.0, 10046.0], [59.1, 10140.0], [59.2, 10169.0], [59.3, 10198.0], [59.4, 10230.0], [59.5, 10239.0], [59.6, 10263.0], [59.7, 10295.0], [59.8, 10329.0], [59.9, 10340.0], [60.0, 10369.0], [60.1, 10432.0], [60.2, 10459.0], [60.3, 10545.0], [60.4, 10552.0], [60.5, 10589.0], [60.6, 10599.0], [60.7, 10672.0], [60.8, 10689.0], [60.9, 10715.0], [61.0, 10719.0], [61.1, 10745.0], [61.2, 10759.0], [61.3, 10765.0], [61.4, 10845.0], [61.5, 10974.0], [61.6, 10991.0], [61.7, 10998.0], [61.8, 11024.0], [61.9, 11050.0], [62.0, 11104.0], [62.1, 11135.0], [62.2, 11148.0], [62.3, 11154.0], [62.4, 11157.0], [62.5, 11235.0], [62.6, 11252.0], [62.7, 11329.0], [62.8, 11344.0], [62.9, 11375.0], [63.0, 11392.0], [63.1, 11411.0], [63.2, 11565.0], [63.3, 11602.0], [63.4, 11686.0], [63.5, 11693.0], [63.6, 11868.0], [63.7, 11870.0], [63.8, 11877.0], [63.9, 11880.0], [64.0, 11896.0], [64.1, 11923.0], [64.2, 11995.0], [64.3, 12011.0], [64.4, 12016.0], [64.5, 12047.0], [64.6, 12188.0], [64.7, 12286.0], [64.8, 12306.0], [64.9, 12316.0], [65.0, 12330.0], [65.1, 12341.0], [65.2, 12343.0], [65.3, 12449.0], [65.4, 12568.0], [65.5, 12635.0], [65.6, 12637.0], [65.7, 12653.0], [65.8, 12725.0], [65.9, 12745.0], [66.0, 12834.0], [66.1, 12838.0], [66.2, 12871.0], [66.3, 12921.0], [66.4, 12945.0], [66.5, 13047.0], [66.6, 13048.0], [66.7, 13059.0], [66.8, 13097.0], [66.9, 13149.0], [67.0, 13253.0], [67.1, 13321.0], [67.2, 13325.0], [67.3, 13381.0], [67.4, 13470.0], [67.5, 13528.0], [67.6, 13568.0], [67.7, 13693.0], [67.8, 13778.0], [67.9, 13855.0], [68.0, 13876.0], [68.1, 13890.0], [68.2, 14000.0], [68.3, 14015.0], [68.4, 14047.0], [68.5, 14071.0], [68.6, 14142.0], [68.7, 14160.0], [68.8, 14183.0], [68.9, 14241.0], [69.0, 14341.0], [69.1, 14363.0], [69.2, 14371.0], [69.3, 14447.0], [69.4, 14470.0], [69.5, 14577.0], [69.6, 14586.0], [69.7, 14636.0], [69.8, 14685.0], [69.9, 14702.0], [70.0, 14872.0], [70.1, 14997.0], [70.2, 15026.0], [70.3, 15028.0], [70.4, 15040.0], [70.5, 15119.0], [70.6, 15172.0], [70.7, 15286.0], [70.8, 15366.0], [70.9, 15403.0], [71.0, 15465.0], [71.1, 15555.0], [71.2, 15557.0], [71.3, 15614.0], [71.4, 15684.0], [71.5, 15801.0], [71.6, 15865.0], [71.7, 16241.0], [71.8, 16301.0], [71.9, 16307.0], [72.0, 16354.0], [72.1, 16354.0], [72.2, 16356.0], [72.3, 16380.0], [72.4, 16449.0], [72.5, 16459.0], [72.6, 16579.0], [72.7, 16603.0], [72.8, 16611.0], [72.9, 16618.0], [73.0, 16622.0], [73.1, 16676.0], [73.2, 16687.0], [73.3, 16775.0], [73.4, 16853.0], [73.5, 16897.0], [73.6, 16898.0], [73.7, 16923.0], [73.8, 16931.0], [73.9, 16944.0], [74.0, 16976.0], [74.1, 17131.0], [74.2, 17133.0], [74.3, 17157.0], [74.4, 17234.0], [74.5, 17272.0], [74.6, 17283.0], [74.7, 17328.0], [74.8, 17329.0], [74.9, 17389.0], [75.0, 17420.0], [75.1, 17530.0], [75.2, 17549.0], [75.3, 17592.0], [75.4, 17678.0], [75.5, 17748.0], [75.6, 17893.0], [75.7, 17939.0], [75.8, 17972.0], [75.9, 18127.0], [76.0, 18172.0], [76.1, 18202.0], [76.2, 18216.0], [76.3, 18242.0], [76.4, 18292.0], [76.5, 18368.0], [76.6, 18385.0], [76.7, 18399.0], [76.8, 18410.0], [76.9, 18435.0], [77.0, 18450.0], [77.1, 18571.0], [77.2, 18662.0], [77.3, 19002.0], [77.4, 19165.0], [77.5, 19178.0], [77.6, 19185.0], [77.7, 19251.0], [77.8, 19255.0], [77.9, 19331.0], [78.0, 19432.0], [78.1, 19447.0], [78.2, 19450.0], [78.3, 19462.0], [78.4, 19614.0], [78.5, 19759.0], [78.6, 19788.0], [78.7, 19801.0], [78.8, 19944.0], [78.9, 19973.0], [79.0, 20009.0], [79.1, 20037.0], [79.2, 20075.0], [79.3, 20143.0], [79.4, 20154.0], [79.5, 20177.0], [79.6, 20553.0], [79.7, 20624.0], [79.8, 20670.0], [79.9, 20701.0], [80.0, 20706.0], [80.1, 20713.0], [80.2, 20728.0], [80.3, 20837.0], [80.4, 21042.0], [80.5, 21103.0], [80.6, 21107.0], [80.7, 21194.0], [80.8, 21238.0], [80.9, 21339.0], [81.0, 21468.0], [81.1, 21469.0], [81.2, 21613.0], [81.3, 21687.0], [81.4, 21687.0], [81.5, 21707.0], [81.6, 21717.0], [81.7, 21739.0], [81.8, 21776.0], [81.9, 21860.0], [82.0, 21949.0], [82.1, 22023.0], [82.2, 22228.0], [82.3, 22261.0], [82.4, 22287.0], [82.5, 22420.0], [82.6, 22452.0], [82.7, 22680.0], [82.8, 22752.0], [82.9, 22812.0], [83.0, 22909.0], [83.1, 22992.0], [83.2, 23151.0], [83.3, 23160.0], [83.4, 23177.0], [83.5, 23209.0], [83.6, 23263.0], [83.7, 23699.0], [83.8, 23735.0], [83.9, 23743.0], [84.0, 23785.0], [84.1, 23832.0], [84.2, 24103.0], [84.3, 24412.0], [84.4, 24455.0], [84.5, 24594.0], [84.6, 24633.0], [84.7, 24645.0], [84.8, 24652.0], [84.9, 24691.0], [85.0, 24924.0], [85.1, 25212.0], [85.2, 25274.0], [85.3, 25857.0], [85.4, 26065.0], [85.5, 26449.0], [85.6, 26714.0], [85.7, 26726.0], [85.8, 26750.0], [85.9, 27014.0], [86.0, 27132.0], [86.1, 27212.0], [86.2, 27240.0], [86.3, 27462.0], [86.4, 27516.0], [86.5, 27702.0], [86.6, 28131.0], [86.7, 28260.0], [86.8, 28294.0], [86.9, 28445.0], [87.0, 28511.0], [87.1, 28703.0], [87.2, 28995.0], [87.3, 29003.0], [87.4, 29215.0], [87.5, 30055.0], [87.6, 30136.0], [87.7, 30529.0], [87.8, 30598.0], [87.9, 30613.0], [88.0, 30999.0], [88.1, 31236.0], [88.2, 31933.0], [88.3, 32217.0], [88.4, 33058.0], [88.5, 33472.0], [88.6, 33581.0], [88.7, 33672.0], [88.8, 33875.0], [88.9, 34749.0], [89.0, 35948.0], [89.1, 37298.0], [89.2, 37420.0], [89.3, 38339.0], [89.4, 50214.0], [89.5, 51494.0], [89.6, 54242.0], [89.7, 55522.0], [89.8, 57575.0], [89.9, 59818.0], [90.0, 60029.0], [90.1, 60029.0], [90.2, 60030.0], [90.3, 60031.0], [90.4, 60032.0], [90.5, 60032.0], [90.6, 60032.0], [90.7, 60032.0], [90.8, 60033.0], [90.9, 60033.0], [91.0, 60033.0], [91.1, 60033.0], [91.2, 60033.0], [91.3, 60034.0], [91.4, 60034.0], [91.5, 60034.0], [91.6, 60034.0], [91.7, 60034.0], [91.8, 60035.0], [91.9, 60035.0], [92.0, 60036.0], [92.1, 60036.0], [92.2, 60036.0], [92.3, 60036.0], [92.4, 60037.0], [92.5, 60037.0], [92.6, 60037.0], [92.7, 60037.0], [92.8, 60037.0], [92.9, 60037.0], [93.0, 60038.0], [93.1, 60038.0], [93.2, 60038.0], [93.3, 60038.0], [93.4, 60038.0], [93.5, 60038.0], [93.6, 60039.0], [93.7, 60039.0], [93.8, 60039.0], [93.9, 60039.0], [94.0, 60039.0], [94.1, 60039.0], [94.2, 60039.0], [94.3, 60039.0], [94.4, 60039.0], [94.5, 60040.0], [94.6, 60040.0], [94.7, 60040.0], [94.8, 60040.0], [94.9, 60040.0], [95.0, 60041.0], [95.1, 60041.0], [95.2, 60041.0], [95.3, 60042.0], [95.4, 60042.0], [95.5, 60042.0], [95.6, 60043.0], [95.7, 60043.0], [95.8, 60043.0], [95.9, 60043.0], [96.0, 60043.0], [96.1, 60044.0], [96.2, 60044.0], [96.3, 60045.0], [96.4, 60045.0], [96.5, 60046.0], [96.6, 60046.0], [96.7, 60046.0], [96.8, 60047.0], [96.9, 60048.0], [97.0, 60048.0], [97.1, 60049.0], [97.2, 60050.0], [97.3, 60050.0], [97.4, 60052.0], [97.5, 60053.0], [97.6, 60053.0], [97.7, 60056.0], [97.8, 60056.0], [97.9, 60056.0], [98.0, 60057.0], [98.1, 60057.0], [98.2, 60057.0], [98.3, 60058.0], [98.4, 60058.0], [98.5, 60061.0], [98.6, 60065.0], [98.7, 60069.0], [98.8, 60082.0], [98.9, 60083.0], [99.0, 60087.0], [99.1, 60091.0], [99.2, 60094.0], [99.3, 60105.0], [99.4, 60105.0], [99.5, 60106.0], [99.6, 60109.0], [99.7, 60127.0], [99.8, 60136.0], [99.9, 60158.0]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 340.0, "series": [{"data": [[85900.0, 1.0], [86700.0, 1.0], [89100.0, 1.0], [50500.0, 1.0], [52900.0, 1.0], [53300.0, 3.0], [58900.0, 1.0], [60100.0, 24.0], [59700.0, 1.0], [61300.0, 4.0], [65800.0, 1.0], [84200.0, 1.0], [500.0, 11.0], [600.0, 61.0], [700.0, 35.0], [800.0, 3.0], [900.0, 2.0], [1000.0, 2.0], [1500.0, 2.0], [1600.0, 1.0], [1700.0, 4.0], [1800.0, 3.0], [1900.0, 3.0], [2000.0, 1.0], [3000.0, 9.0], [3700.0, 1.0], [4800.0, 1.0], [78500.0, 1.0], [5600.0, 1.0], [89700.0, 2.0], [6400.0, 1.0], [8500.0, 1.0], [8200.0, 1.0], [8900.0, 1.0], [10500.0, 1.0], [11600.0, 1.0], [12800.0, 2.0], [13100.0, 1.0], [13700.0, 1.0], [14100.0, 1.0], [14200.0, 2.0], [14600.0, 1.0], [14900.0, 1.0], [15300.0, 1.0], [15000.0, 1.0], [15600.0, 1.0], [15800.0, 1.0], [15700.0, 1.0], [15500.0, 2.0], [15900.0, 2.0], [16300.0, 1.0], [16100.0, 1.0], [17200.0, 1.0], [16800.0, 1.0], [16400.0, 1.0], [16600.0, 1.0], [17400.0, 1.0], [17600.0, 2.0], [18400.0, 1.0], [18000.0, 2.0], [18200.0, 1.0], [17800.0, 1.0], [19200.0, 1.0], [18600.0, 2.0], [19400.0, 1.0], [20200.0, 3.0], [20000.0, 1.0], [19800.0, 3.0], [19600.0, 3.0], [21400.0, 2.0], [21000.0, 3.0], [20600.0, 1.0], [21200.0, 2.0], [20800.0, 2.0], [22200.0, 3.0], [21600.0, 2.0], [22400.0, 4.0], [22000.0, 1.0], [21800.0, 1.0], [22600.0, 3.0], [23000.0, 2.0], [22800.0, 1.0], [23200.0, 1.0], [24400.0, 2.0], [23800.0, 1.0], [24200.0, 1.0], [24000.0, 2.0], [23600.0, 1.0], [25400.0, 3.0], [24600.0, 2.0], [26400.0, 2.0], [26000.0, 1.0], [25600.0, 1.0], [26200.0, 1.0], [26800.0, 2.0], [27200.0, 2.0], [27400.0, 2.0], [27600.0, 1.0], [28000.0, 3.0], [28200.0, 1.0], [27800.0, 1.0], [29400.0, 2.0], [28800.0, 1.0], [29600.0, 2.0], [30200.0, 2.0], [29800.0, 1.0], [30800.0, 2.0], [31400.0, 1.0], [31000.0, 1.0], [32600.0, 1.0], [36000.0, 2.0], [47600.0, 1.0], [54800.0, 1.0], [55200.0, 1.0], [56400.0, 1.0], [59200.0, 2.0], [58400.0, 1.0], [60000.0, 340.0], [61600.0, 1.0], [75200.0, 1.0], [85600.0, 2.0], [89600.0, 1.0], [90400.0, 1.0], [34700.0, 1.0], [50700.0, 1.0], [51900.0, 1.0], [53900.0, 1.0], [54700.0, 1.0], [55500.0, 2.0], [56300.0, 2.0], [57900.0, 2.0], [57500.0, 1.0], [61100.0, 5.0], [59900.0, 1.0], [61500.0, 8.0], [88600.0, 1.0], [90200.0, 1.0], [16900.0, 1.0], [16500.0, 3.0], [17100.0, 1.0], [17300.0, 2.0], [18100.0, 3.0], [17500.0, 1.0], [19300.0, 1.0], [18500.0, 2.0], [18900.0, 1.0], [20100.0, 3.0], [20300.0, 1.0], [20900.0, 3.0], [21100.0, 3.0], [21300.0, 1.0], [21500.0, 2.0], [20700.0, 1.0], [21900.0, 2.0], [22100.0, 1.0], [22500.0, 3.0], [22900.0, 5.0], [23300.0, 3.0], [23100.0, 1.0], [23500.0, 2.0], [23700.0, 2.0], [24100.0, 3.0], [23900.0, 2.0], [24300.0, 2.0], [24500.0, 2.0], [24700.0, 3.0], [25300.0, 2.0], [24900.0, 1.0], [25700.0, 2.0], [25900.0, 2.0], [26300.0, 1.0], [27500.0, 1.0], [26900.0, 1.0], [27300.0, 1.0], [26700.0, 1.0], [27700.0, 1.0], [28300.0, 3.0], [27900.0, 1.0], [29500.0, 2.0], [28900.0, 1.0], [29300.0, 1.0], [29700.0, 4.0], [30100.0, 1.0], [30300.0, 1.0], [31700.0, 1.0], [31900.0, 2.0], [32500.0, 1.0], [33000.0, 1.0], [56600.0, 1.0], [59400.0, 1.0], [59800.0, 1.0], [75600.0, 1.0], [89200.0, 1.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[60100.0, 8.0], [500.0, 37.0], [600.0, 79.0], [700.0, 23.0], [800.0, 24.0], [900.0, 22.0], [1000.0, 22.0], [1100.0, 22.0], [1200.0, 16.0], [1300.0, 9.0], [1400.0, 11.0], [1500.0, 22.0], [1600.0, 9.0], [1700.0, 5.0], [1800.0, 6.0], [1900.0, 5.0], [2000.0, 7.0], [2100.0, 9.0], [2200.0, 11.0], [2300.0, 10.0], [2400.0, 8.0], [2500.0, 10.0], [2600.0, 13.0], [2700.0, 5.0], [2800.0, 4.0], [2900.0, 4.0], [3000.0, 10.0], [3100.0, 2.0], [3300.0, 8.0], [3200.0, 6.0], [3400.0, 1.0], [3500.0, 9.0], [3600.0, 3.0], [3700.0, 3.0], [3800.0, 3.0], [3900.0, 2.0], [4000.0, 5.0], [4200.0, 4.0], [4300.0, 4.0], [4100.0, 4.0], [4500.0, 4.0], [4600.0, 3.0], [4400.0, 1.0], [4800.0, 1.0], [4700.0, 4.0], [5000.0, 5.0], [4900.0, 3.0], [5100.0, 3.0], [5200.0, 5.0], [5300.0, 4.0], [5500.0, 5.0], [5400.0, 4.0], [5600.0, 2.0], [5700.0, 4.0], [5800.0, 2.0], [6000.0, 4.0], [6100.0, 2.0], [5900.0, 4.0], [6300.0, 7.0], [6200.0, 3.0], [6400.0, 4.0], [6600.0, 6.0], [6500.0, 2.0], [6700.0, 5.0], [6900.0, 1.0], [6800.0, 1.0], [7100.0, 6.0], [7000.0, 4.0], [7400.0, 3.0], [7300.0, 4.0], [7200.0, 2.0], [7500.0, 3.0], [7600.0, 1.0], [7900.0, 5.0], [7800.0, 5.0], [7700.0, 3.0], [8000.0, 8.0], [8100.0, 2.0], [8200.0, 3.0], [8400.0, 5.0], [8700.0, 7.0], [8500.0, 2.0], [8600.0, 1.0], [8300.0, 5.0], [8900.0, 2.0], [8800.0, 6.0], [9000.0, 7.0], [9100.0, 1.0], [9200.0, 1.0], [9400.0, 2.0], [9700.0, 2.0], [9600.0, 6.0], [9300.0, 5.0], [9500.0, 3.0], [10000.0, 5.0], [10200.0, 4.0], [9800.0, 6.0], [10100.0, 4.0], [9900.0, 4.0], [10300.0, 4.0], [10700.0, 5.0], [10500.0, 4.0], [10600.0, 3.0], [10400.0, 2.0], [11100.0, 6.0], [10900.0, 3.0], [11200.0, 2.0], [10800.0, 2.0], [11000.0, 2.0], [11300.0, 5.0], [11600.0, 3.0], [11500.0, 1.0], [11400.0, 1.0], [11800.0, 6.0], [12000.0, 3.0], [11900.0, 2.0], [12100.0, 2.0], [12200.0, 1.0], [12600.0, 3.0], [12700.0, 2.0], [12300.0, 5.0], [12500.0, 1.0], [12400.0, 2.0], [12900.0, 2.0], [13000.0, 4.0], [12800.0, 4.0], [13300.0, 3.0], [13100.0, 2.0], [13200.0, 1.0], [13600.0, 2.0], [13700.0, 1.0], [13800.0, 3.0], [13500.0, 2.0], [13400.0, 1.0], [14000.0, 5.0], [14200.0, 1.0], [14100.0, 3.0], [14300.0, 3.0], [14400.0, 3.0], [14500.0, 2.0], [14600.0, 2.0], [14800.0, 1.0], [14700.0, 1.0], [15300.0, 2.0], [15100.0, 2.0], [14900.0, 2.0], [15000.0, 3.0], [15200.0, 1.0], [15800.0, 2.0], [15600.0, 2.0], [15500.0, 2.0], [15400.0, 2.0], [16100.0, 1.0], [16300.0, 6.0], [16200.0, 1.0], [17200.0, 3.0], [16600.0, 6.0], [17000.0, 1.0], [16800.0, 3.0], [16400.0, 3.0], [17400.0, 1.0], [17800.0, 1.0], [18200.0, 5.0], [18400.0, 3.0], [17600.0, 1.0], [18600.0, 2.0], [19000.0, 1.0], [19400.0, 4.0], [19200.0, 2.0], [20000.0, 3.0], [19800.0, 1.0], [19600.0, 1.0], [21200.0, 1.0], [21400.0, 2.0], [21000.0, 2.0], [20800.0, 1.0], [20600.0, 2.0], [21800.0, 2.0], [22200.0, 3.0], [22000.0, 1.0], [21600.0, 3.0], [22400.0, 2.0], [22600.0, 2.0], [23200.0, 2.0], [22800.0, 1.0], [23800.0, 1.0], [24400.0, 2.0], [23600.0, 1.0], [24200.0, 1.0], [24600.0, 4.0], [25200.0, 2.0], [25800.0, 1.0], [26000.0, 1.0], [26400.0, 1.0], [27000.0, 1.0], [27200.0, 2.0], [27400.0, 1.0], [28200.0, 2.0], [28400.0, 1.0], [29000.0, 1.0], [29200.0, 1.0], [30000.0, 2.0], [30600.0, 1.0], [31200.0, 1.0], [32200.0, 1.0], [33600.0, 1.0], [37200.0, 1.0], [60000.0, 105.0], [34700.0, 1.0], [33500.0, 1.0], [35900.0, 2.0], [38300.0, 1.0], [55500.0, 1.0], [57500.0, 1.0], [17100.0, 3.0], [16900.0, 4.0], [16700.0, 2.0], [17300.0, 4.0], [16500.0, 1.0], [17700.0, 2.0], [17500.0, 3.0], [18300.0, 3.0], [17900.0, 2.0], [18100.0, 2.0], [19300.0, 2.0], [19100.0, 3.0], [18500.0, 1.0], [19900.0, 3.0], [19700.0, 2.0], [20300.0, 1.0], [20100.0, 3.0], [21100.0, 3.0], [21300.0, 1.0], [20700.0, 4.0], [20500.0, 1.0], [21500.0, 1.0], [21700.0, 4.0], [21900.0, 1.0], [23100.0, 4.0], [22900.0, 2.0], [22700.0, 1.0], [23700.0, 3.0], [24100.0, 1.0], [24500.0, 1.0], [24900.0, 2.0], [26700.0, 4.0], [27500.0, 1.0], [27100.0, 1.0], [28100.0, 2.0], [27700.0, 1.0], [28500.0, 1.0], [28900.0, 1.0], [28700.0, 1.0], [30500.0, 2.0], [30100.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [31900.0, 1.0], [33800.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [37400.0, 1.0], [50200.0, 1.0], [51400.0, 1.0], [54200.0, 1.0], [57000.0, 1.0], [59800.0, 1.0]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 90400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 59.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 973.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 59.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 973.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 880.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.681818181818182, "minX": 1.65170838E12, "maxY": 771.7096774193542, "series": [{"data": [[1.65170844E12, 277.35361216730064], [1.65170838E12, 771.7096774193542], [1.6517085E12, 11.681818181818182]], "isOverall": false, "label": "Secret Management (spike)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6517085E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 565.0, "minX": 1.0, "maxY": 90457.0, "series": [{"data": [[4.0, 60096.0], [8.0, 60039.0], [9.0, 60032.0], [10.0, 60031.0], [14.0, 60101.0], [17.0, 60105.0], [23.0, 90457.0], [24.0, 90253.0], [26.0, 89703.5], [27.0, 89676.0], [29.0, 89192.0], [31.0, 88679.0], [33.0, 86722.0], [34.0, 85931.0], [37.0, 85631.0], [36.0, 85667.0], [44.0, 84242.0], [47.0, 78567.0], [46.0, 60021.0], [49.0, 60021.0], [51.0, 60048.0], [53.0, 75260.0], [52.0, 75608.0], [55.0, 60114.0], [54.0, 60026.0], [57.0, 60019.0], [56.0, 60021.0], [59.0, 60021.0], [61.0, 60023.0], [63.0, 60120.5], [67.0, 60050.0], [66.0, 60021.0], [65.0, 60019.0], [64.0, 60024.0], [71.0, 60019.0], [70.0, 60018.0], [69.0, 60022.0], [68.0, 60022.0], [75.0, 60028.0], [74.0, 60098.0], [72.0, 60023.0], [79.0, 60019.0], [78.0, 60021.0], [77.0, 60041.0], [76.0, 60035.0], [83.0, 60022.0], [82.0, 60023.0], [81.0, 60039.0], [87.0, 30369.0], [86.0, 60020.0], [85.0, 60022.0], [84.0, 60021.0], [91.0, 60022.0], [90.0, 60022.0], [89.0, 60018.0], [88.0, 60018.0], [95.0, 60019.0], [94.0, 60021.0], [93.0, 60030.0], [92.0, 60021.0], [99.0, 60021.0], [98.0, 60022.0], [97.0, 60088.0], [96.0, 60019.0], [102.0, 60023.0], [101.0, 60020.0], [100.0, 60023.0], [106.0, 60021.0], [105.0, 60021.0], [104.0, 60038.0], [111.0, 60023.0], [110.0, 60019.0], [109.0, 60022.0], [108.0, 60020.5], [115.0, 60021.0], [114.0, 60020.0], [113.0, 60020.0], [112.0, 60019.0], [119.0, 60021.0], [118.0, 60022.0], [117.0, 60033.0], [116.0, 59849.0], [123.0, 60023.0], [122.0, 60017.0], [121.0, 60018.0], [120.0, 60018.0], [127.0, 60018.0], [126.0, 60021.0], [125.0, 60023.0], [124.0, 60018.0], [135.0, 60022.0], [132.0, 60024.0], [131.0, 60018.0], [130.0, 60020.0], [129.0, 60023.0], [128.0, 60029.0], [143.0, 60021.0], [142.0, 60023.0], [141.0, 60021.0], [140.0, 60019.0], [139.0, 60021.0], [138.0, 60021.0], [137.0, 60024.0], [136.0, 60020.0], [151.0, 60019.0], [150.0, 60023.0], [149.0, 60023.0], [148.0, 60017.0], [147.0, 60025.0], [146.0, 57362.5], [144.0, 65862.0], [153.0, 608.0], [155.0, 12714.6], [159.0, 60018.0], [158.0, 60026.0], [157.0, 60018.0], [156.0, 60018.0], [154.0, 60022.0], [161.0, 30417.5], [163.0, 20606.0], [167.0, 60023.333333333336], [164.0, 60025.0], [162.0, 60019.0], [160.0, 60019.0], [171.0, 30531.5], [175.0, 60018.0], [174.0, 60021.0], [173.0, 60020.0], [172.0, 60024.0], [170.0, 60017.0], [169.0, 60021.0], [168.0, 60022.0], [183.0, 60019.0], [182.0, 60019.0], [181.0, 56608.0], [180.0, 60021.0], [179.0, 60026.0], [178.0, 55375.5], [177.0, 60023.0], [176.0, 60018.0], [191.0, 60020.0], [189.0, 60020.0], [188.0, 59993.0], [187.0, 60020.0], [186.0, 60032.0], [185.0, 60021.0], [184.0, 60020.5], [199.0, 60020.0], [198.0, 60019.0], [196.0, 52967.0], [195.0, 60024.0], [194.0, 60016.0], [193.0, 60018.0], [192.0, 60020.0], [207.0, 60038.5], [202.0, 60022.0], [201.0, 60022.0], [214.0, 60022.0], [209.0, 60038.0], [223.0, 60025.0], [222.0, 60017.0], [221.0, 60022.0], [220.0, 60020.0], [219.0, 60023.0], [218.0, 60020.0], [217.0, 60020.0], [231.0, 60021.0], [230.0, 60018.0], [229.0, 60022.0], [228.0, 60022.0], [227.0, 60020.0], [225.0, 60020.0], [224.0, 60026.0], [237.0, 57956.0], [236.0, 60016.0], [235.0, 60021.0], [234.0, 60021.0], [233.0, 60026.0], [232.0, 60023.0], [247.0, 60020.0], [246.0, 60022.0], [245.0, 60021.0], [244.0, 55572.0], [243.0, 60019.0], [242.0, 60087.2], [255.0, 60020.0], [254.0, 53334.0], [253.0, 60021.0], [252.0, 60024.0], [251.0, 60023.0], [250.0, 60019.0], [249.0, 60020.0], [248.0, 60022.0], [271.0, 60018.5], [263.0, 28518.5], [257.0, 60023.0], [256.0, 60018.0], [259.0, 60021.0], [258.0, 60037.0], [267.0, 30930.5], [269.0, 60019.0], [268.0, 60024.0], [266.0, 60022.0], [265.0, 60020.0], [264.0, 60026.0], [262.0, 58945.0], [261.0, 60022.0], [260.0, 60020.0], [274.0, 60020.0], [286.0, 60046.0], [283.0, 60056.0], [278.0, 61517.0], [277.0, 61541.0], [276.0, 61546.0], [275.0, 61550.0], [273.0, 60020.0], [272.0, 60024.0], [294.0, 1665.6666666666667], [295.0, 1917.5], [297.0, 10139.0], [303.0, 60042.0], [300.0, 60041.0], [298.0, 60041.0], [296.0, 60046.0], [290.0, 61626.0], [317.0, 60036.5], [310.0, 30958.5], [318.0, 60051.0], [315.0, 60039.0], [314.0, 60042.0], [313.0, 60040.0], [312.0, 60042.0], [308.0, 60048.0], [307.0, 60041.0], [306.0, 60037.0], [331.0, 60037.0], [330.0, 60017.0], [329.0, 60042.0], [324.0, 60037.0], [323.0, 61516.0], [322.0, 60050.0], [350.0, 60065.0], [351.0, 60061.0], [349.0, 60063.666666666664], [347.0, 60065.5], [344.0, 60794.0], [343.0, 60110.0], [341.0, 60113.0], [340.0, 60111.0], [339.0, 60114.5], [337.0, 58243.5], [366.0, 60052.0], [367.0, 60049.0], [364.0, 60054.0], [363.0, 60057.0], [362.0, 60084.666666666664], [357.0, 60060.0], [356.0, 60101.0], [354.0, 60080.5], [353.0, 60061.0], [372.0, 61376.0], [370.0, 60040.0], [368.0, 60037.0], [399.0, 61384.0], [398.0, 61335.0], [393.0, 60020.0], [390.0, 60019.0], [413.0, 60024.0], [414.0, 60019.0], [412.0, 60036.5], [410.0, 60038.0], [409.0, 60034.0], [408.0, 60040.0], [406.0, 60047.5], [405.0, 60051.0], [401.0, 60029.0], [400.0, 60020.0], [419.0, 60584.0], [429.0, 60018.0], [431.0, 60023.0], [428.0, 60022.0], [427.0, 60047.0], [424.0, 61133.0], [423.0, 60023.0], [422.0, 61121.0], [421.0, 61133.0], [417.0, 60021.0], [416.0, 60101.0], [446.0, 59451.0], [447.0, 60018.0], [445.0, 51904.0], [444.0, 58462.0], [443.0, 58957.0], [442.0, 47632.0], [441.0, 57586.0], [440.0, 54843.0], [439.0, 50529.0], [433.0, 60022.0], [432.0, 60020.0], [435.0, 56371.0], [434.0, 60040.0], [438.0, 53378.0], [437.0, 59252.0], [436.0, 56402.0], [462.0, 60023.0], [463.0, 60026.0], [461.0, 60019.0], [460.0, 60046.0], [459.0, 60065.0], [458.0, 60036.0], [457.0, 60020.0], [456.0, 60021.0], [455.0, 60022.0], [448.0, 59252.0], [451.0, 55516.0], [450.0, 53639.0], [454.0, 60028.0], [453.0, 59776.0], [452.0, 60024.0], [478.0, 60020.0], [479.0, 60019.0], [477.0, 60018.0], [476.0, 60024.0], [475.0, 60019.0], [474.0, 60024.0], [472.0, 60106.0], [470.0, 60020.5], [467.0, 60024.0], [466.0, 60025.0], [465.0, 60033.0], [464.0, 60021.0], [469.0, 60021.0], [483.0, 60021.0], [493.0, 60020.0], [494.0, 60035.0], [492.0, 60029.0], [481.0, 60030.0], [480.0, 60017.0], [491.0, 60021.5], [489.0, 60073.0], [487.0, 60022.0], [486.0, 60026.0], [485.0, 60021.0], [484.0, 60022.0], [510.0, 60017.0], [511.0, 60029.0], [509.0, 60020.0], [508.0, 60022.0], [507.0, 60045.0], [506.0, 60052.0], [505.0, 60022.0], [503.0, 60022.0], [497.0, 60025.0], [496.0, 60064.5], [499.0, 60020.0], [498.0, 60096.0], [502.0, 60054.0], [501.0, 60021.0], [500.0, 60027.0], [518.0, 60101.0], [543.0, 25457.5], [541.0, 36013.0], [540.0, 36091.0], [524.0, 60084.75], [520.0, 60127.0], [517.0, 60030.0], [516.0, 60041.0], [514.0, 60047.0], [513.0, 60025.0], [512.0, 60030.0], [570.0, 23253.0], [575.0, 28086.0], [560.0, 3796.0], [562.0, 31442.0], [574.0, 28398.0], [573.0, 27245.0], [572.0, 25992.0], [559.0, 19826.0], [545.0, 20266.0], [544.0, 30260.0], [548.0, 31459.5], [546.0, 30868.0], [550.0, 26280.0], [549.0, 32530.0], [558.0, 34793.0], [557.0, 32663.0], [556.0, 22218.0], [555.0, 31959.0], [554.0, 20192.0], [553.0, 21176.0], [567.0, 29680.0], [566.0, 27450.0], [565.0, 30829.0], [563.0, 21611.0], [604.0, 29428.0], [607.0, 22819.0], [593.0, 26722.0], [592.0, 19663.0], [595.0, 23061.0], [594.0, 19643.0], [597.0, 23856.0], [596.0, 24675.0], [606.0, 23002.5], [605.0, 17411.0], [603.0, 25018.5], [602.0, 29746.0], [601.0, 25649.0], [600.0, 30116.0], [591.0, 27936.0], [583.0, 29445.0], [582.0, 30223.0], [581.0, 31749.0], [580.0, 24150.0], [579.0, 16141.0], [578.0, 23208.0], [577.0, 24753.0], [590.0, 29761.0], [599.0, 29792.0], [598.0, 29677.0], [615.0, 16343.0], [635.0, 28356.0], [637.0, 25755.5], [634.0, 20233.0], [633.0, 29325.0], [632.0, 19424.0], [614.0, 27421.0], [613.0, 31992.0], [611.0, 29713.0], [610.0, 28564.5], [609.0, 28391.0], [608.0, 19892.5], [623.0, 21161.5], [620.0, 21415.0], [618.0, 27454.0], [617.0, 19183.0], [616.0, 26040.0], [631.0, 21151.0], [630.0, 20332.0], [627.0, 22583.0], [626.0, 25827.0], [664.0, 22938.0], [670.0, 29597.0], [669.0, 14263.5], [671.0, 22986.0], [658.0, 17882.0], [657.0, 27715.0], [668.0, 24349.333333333332], [665.0, 21519.0], [655.0, 18613.0], [640.0, 23586.0], [643.0, 28996.0], [641.0, 25339.0], [646.0, 25743.0], [645.0, 22431.0], [654.0, 20723.0], [653.0, 28083.0], [651.0, 21513.0], [650.0, 28072.0], [649.0, 26984.0], [662.0, 23503.0], [661.0, 14268.0], [660.0, 17292.0], [659.0, 27563.0], [701.0, 26469.0], [692.0, 22984.0], [703.0, 22630.0], [689.0, 20863.0], [688.0, 22543.0], [691.0, 21459.0], [690.0, 23176.0], [698.0, 25752.0], [697.0, 25933.0], [696.0, 18176.0], [679.0, 23603.0], [677.0, 19802.0], [676.0, 21398.0], [675.0, 24126.0], [673.0, 20943.0], [672.0, 22481.0], [687.0, 24939.0], [686.0, 24005.0], [684.0, 20814.0], [683.0, 14284.0], [682.0, 20805.5], [680.0, 18572.0], [695.0, 12826.0], [694.0, 18198.0], [693.0, 18289.0], [724.0, 22653.0], [735.0, 22041.0], [734.0, 17632.0], [729.0, 24037.0], [728.0, 23957.0], [719.0, 13731.0], [707.0, 24651.0], [705.0, 25325.0], [709.0, 26451.0], [708.0, 20177.0], [718.0, 17308.0], [715.0, 22560.0], [714.0, 27275.0], [713.0, 22961.0], [712.0, 15525.0], [727.0, 26889.0], [726.0, 25458.0], [725.0, 21250.0], [721.0, 22285.0], [720.0, 24392.0], [760.0, 22422.0], [763.0, 24117.0], [767.0, 21028.0], [761.0, 23954.0], [757.0, 24331.0], [755.0, 15518.0], [750.0, 14683.0], [737.0, 24201.0], [736.0, 23395.0], [742.0, 24446.0], [740.0, 20185.0], [748.0, 21960.0], [746.0, 24730.0], [745.0, 24415.0], [744.0, 22921.0], [797.0, 18127.0], [781.0, 12333.5], [799.0, 19284.0], [790.0, 21976.0], [786.0, 17533.0], [784.0, 18050.0], [782.0, 22135.0], [774.0, 15001.0], [772.0, 25423.0], [779.0, 17392.0], [778.0, 22485.0], [830.0, 18040.0], [827.0, 16543.0], [818.0, 16518.0], [817.0, 17180.0], [816.0, 21604.0], [815.0, 19363.0], [814.0, 18592.0], [809.0, 20009.0], [803.0, 20632.0], [859.0, 15805.0], [855.0, 648.25], [851.0, 18473.0], [848.0, 15763.0], [844.0, 15317.0], [843.0, 20272.0], [839.0, 20991.0], [837.0, 22245.0], [836.0, 21060.0], [874.0, 702.409090909091], [883.0, 723.9375000000001], [887.0, 6476.0], [889.0, 719.9], [892.0, 17677.0], [890.0, 16972.0], [871.0, 15699.0], [865.0, 20907.0], [897.0, 762.75], [899.0, 670.625], [903.0, 649.8571428571429], [909.0, 574.0], [927.0, 15902.0], [920.0, 15942.0], [940.0, 657.6666666666666], [942.0, 565.0], [944.0, 613.2857142857142], [950.0, 3784.96], [941.0, 14999.0], [938.0, 13101.0], [933.0, 14132.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[476.41146496815395, 39582.61401273887]], "isOverall": false, "label": "Generate SSH credential-Aggregated", "isController": false}, {"data": [[2.0, 60039.0], [3.0, 60060.0], [5.0, 60043.0], [6.0, 60034.0], [7.0, 60039.0], [11.0, 60031.0], [14.0, 60107.5], [15.0, 60030.0], [17.0, 60050.0], [18.0, 60033.0], [19.0, 60029.0], [20.0, 60056.0], [21.0, 60036.0], [22.0, 60105.0], [30.0, 60039.0], [32.0, 60038.0], [35.0, 60083.0], [38.0, 6128.636363636364], [39.0, 60032.0], [41.0, 60039.0], [40.0, 60065.0], [43.0, 60136.0], [42.0, 60043.0], [45.0, 60087.0], [47.0, 743.6666666666666], [48.0, 30421.0], [51.0, 60098.0], [55.0, 838.0], [57.0, 1143.0], [59.0, 901.0], [58.0, 60034.0], [61.0, 931.0], [60.0, 60036.0], [64.0, 942.0], [71.0, 1436.0], [80.0, 1091.0], [85.0, 1222.5], [87.0, 1251.3333333333333], [133.0, 60036.0], [155.0, 1402.0], [153.0, 60032.0], [152.0, 60033.0], [161.0, 1067.6666666666667], [163.0, 722.0], [166.0, 1416.5], [168.0, 1096.0], [207.0, 60040.0], [204.0, 60042.0], [200.0, 60034.0], [213.0, 60032.0], [212.0, 60032.666666666664], [209.0, 60038.0], [208.0, 60039.0], [218.0, 1105.6], [219.0, 962.6666666666666], [216.0, 60036.5], [285.0, 60051.0], [282.0, 60057.0], [281.0, 60056.0], [280.0, 60057.0], [302.0, 21272.666666666668], [303.0, 60042.0], [300.0, 60040.0], [295.0, 60046.5], [293.0, 60053.0], [292.0, 60057.5], [289.0, 60038.333333333336], [305.0, 2042.0], [310.0, 2354.0], [313.0, 30972.0], [319.0, 60050.0], [317.0, 60034.0], [308.0, 60047.0], [306.0, 60039.0], [304.0, 60034.0], [335.0, 60158.0], [334.0, 60174.0], [329.0, 60037.0], [327.0, 60041.0], [325.0, 60041.0], [322.0, 60048.0], [347.0, 60061.0], [360.0, 2279.0], [364.0, 2386.0], [367.0, 60052.0], [362.0, 60104.666666666664], [355.0, 60091.0], [353.0, 60094.0], [381.0, 60044.0], [383.0, 60041.0], [374.0, 2073.6666666666665], [376.0, 30913.0], [382.0, 60046.0], [380.0, 60039.0], [369.0, 60032.0], [379.0, 60040.0], [378.0, 60037.0], [375.0, 60045.0], [397.0, 60035.0], [396.0, 60036.333333333336], [393.0, 60037.5], [389.0, 60038.666666666664], [386.0, 60038.0], [385.0, 60037.0], [384.0, 60043.0], [410.0, 1914.5], [414.0, 2691.0], [415.0, 60037.5], [406.0, 60040.5], [422.0, 2189.75], [423.0, 2169.0], [424.0, 1985.0], [431.0, 59818.0], [426.0, 60046.0], [425.0, 60045.0], [437.0, 2563.25], [449.0, 2452.0], [461.0, 2476.0], [464.0, 2214.0], [476.0, 2622.0], [473.0, 57575.0], [481.0, 2363.857142857143], [490.0, 2567.6666666666665], [492.0, 2227.0], [482.0, 57072.0], [496.0, 2451.0], [505.0, 2200.0], [504.0, 55522.0], [542.0, 30055.0], [514.0, 2410.2], [527.0, 14917.333333333334], [526.0, 50214.0], [525.0, 51494.0], [528.0, 8424.0], [530.0, 33581.0], [529.0, 35948.0], [532.0, 33672.0], [531.0, 33472.0], [533.0, 19579.5], [534.0, 11782.0], [535.0, 37298.0], [539.0, 13160.0], [538.0, 33058.0], [537.0, 30613.0], [536.0, 30999.0], [519.0, 54242.0], [574.0, 2949.0], [562.0, 1904.0], [560.0, 18701.0], [563.0, 3033.6666666666665], [571.0, 31236.0], [568.0, 31933.0], [564.0, 30598.0], [561.0, 28131.0], [552.0, 28511.0], [551.0, 28703.0], [588.0, 30136.0], [578.0, 2313.0], [586.0, 2974.6666666666665], [602.0, 3676.0], [589.0, 27516.0], [587.0, 27457.0], [585.0, 27132.0], [584.0, 28445.0], [576.0, 31331.0], [636.0, 2380.0], [610.0, 2294.0], [611.0, 3034.0], [613.0, 28260.0], [617.0, 5520.0], [619.0, 15817.0], [621.0, 29003.0], [629.0, 2999.0], [630.0, 1257.0], [639.0, 26750.0], [628.0, 25212.0], [625.0, 27462.0], [624.0, 30006.0], [638.0, 28294.0], [666.0, 2199.0], [640.0, 3226.0], [644.0, 30529.0], [643.0, 24594.0], [652.0, 25274.0], [648.0, 19642.0], [650.0, 1974.0], [661.0, 3035.5], [662.0, 3366.0], [667.0, 3438.0], [670.0, 2313.0], [656.0, 24652.0], [663.0, 26449.0], [700.0, 24956.0], [673.0, 3125.0], [675.0, 2578.0], [699.0, 27014.0], [678.0, 28995.0], [681.0, 3898.5], [682.0, 2714.5], [686.0, 3324.0], [685.0, 23198.0], [689.0, 2718.0], [691.0, 14816.0], [695.0, 5516.0], [702.0, 22812.0], [732.0, 26726.0], [704.0, 2003.0], [707.0, 3285.0], [706.0, 21860.0], [705.0, 23785.0], [710.0, 24691.0], [731.0, 20160.0], [711.0, 21707.0], [713.0, 3277.0], [715.0, 3803.5], [716.0, 12770.5], [717.0, 24455.0], [720.0, 3591.1666666666665], [722.0, 20701.0], [726.0, 26065.0], [723.0, 24103.0], [734.0, 3961.25], [733.0, 24264.0], [739.0, 11986.666666666668], [742.0, 2526.0], [741.0, 24412.0], [743.0, 20154.0], [762.0, 11670.0], [766.0, 22053.5], [753.0, 23263.0], [752.0, 21949.0], [764.0, 25857.0], [744.0, 4320.0], [745.0, 4316.0], [747.0, 13179.0], [749.0, 21776.0], [750.0, 3762.0], [751.0, 13843.5], [738.0, 23699.0], [754.0, 11953.0], [758.0, 11023.0], [757.0, 23177.0], [759.0, 21687.0], [792.0, 4719.0], [769.0, 13305.5], [770.0, 7562.75], [771.0, 23160.0], [774.0, 22680.0], [773.0, 21468.0], [780.0, 8158.25], [777.0, 21201.5], [776.0, 21613.0], [781.0, 4674.0], [768.0, 24924.0], [784.0, 11850.0], [786.0, 12108.5], [788.0, 21711.0], [791.0, 21717.0], [790.0, 21595.0], [799.0, 12967.0], [796.0, 20624.0], [795.0, 22287.0], [794.0, 24633.0], [793.0, 22679.0], [824.0, 2519.3076923076924], [800.0, 12579.0], [801.0, 17592.0], [813.0, 19788.0], [812.0, 21042.0], [811.0, 20706.0], [810.0, 20728.0], [808.0, 23151.0], [802.0, 2031.642857142857], [805.0, 2623.923076923077], [804.0, 20837.0], [807.0, 22992.0], [806.0, 21030.0], [816.0, 1088.25], [819.0, 17340.0], [821.0, 21739.0], [820.0, 17678.0], [823.0, 16687.0], [822.0, 19251.0], [831.0, 21049.0], [829.0, 19447.0], [828.0, 21339.0], [826.0, 19688.0], [862.0, 19178.0], [832.0, 2440.6923076923076], [833.0, 21194.0], [838.0, 22671.0], [836.0, 17308.666666666668], [846.0, 19759.0], [845.0, 17939.0], [842.0, 21238.0], [841.0, 16611.0], [840.0, 18385.0], [850.0, 908.75], [852.0, 2270.2307692307695], [851.0, 17245.0], [853.0, 19002.0], [855.0, 4986.5], [854.0, 18127.0], [856.0, 10865.5], [863.0, 18242.0], [848.0, 18172.0], [861.0, 16301.0], [860.0, 18202.0], [858.0, 16535.0], [857.0, 18631.0], [888.0, 4765.0], [874.0, 9554.555555555555], [872.0, 18435.0], [875.0, 13160.5], [876.0, 8048.0], [877.0, 16931.0], [879.0, 18216.0], [866.0, 15465.0], [865.0, 19973.0], [868.0, 19185.0], [867.0, 17040.0], [871.0, 19165.0], [869.0, 17972.0], [878.0, 17748.0], [880.0, 10891.0], [883.0, 2588.666666666667], [882.0, 18450.0], [881.0, 16579.0], [887.0, 13498.333333333334], [885.0, 18308.0], [889.0, 9659.666666666668], [891.0, 14773.5], [890.0, 17359.0], [893.0, 15286.0], [892.0, 15040.0], [899.0, 4565.0], [897.0, 1056.0], [896.0, 15703.0], [898.0, 16688.25], [903.0, 3900.0], [902.0, 16449.0], [901.0, 14997.0], [900.0, 17893.0], [920.0, 16151.0], [922.0, 14767.0], [921.0, 15775.666666666666], [924.0, 14076.666666666666], [923.0, 14294.5], [905.0, 11898.333333333334], [907.0, 16356.0], [906.0, 15149.666666666666], [908.0, 2300.8666666666663], [909.0, 604.1818181818181], [910.0, 17718.5], [911.0, 14373.5], [912.0, 3592.166666666667], [916.0, 8035.25], [915.0, 14187.0], [914.0, 16622.0], [913.0, 16618.0], [918.0, 16853.0], [917.0, 14673.5], [926.0, 13397.5], [925.0, 12533.0], [935.0, 14932.5], [947.0, 10532.0], [940.0, 3346.2666666666664], [939.0, 11048.5], [938.0, 12122.5], [937.0, 12166.25], [936.0, 14685.0], [941.0, 13253.0], [942.0, 1696.083333333333], [944.0, 1248.1052631578948], [943.0, 12770.5], [929.0, 11592.25], [928.0, 15172.0], [931.0, 13128.333333333334], [930.0, 14584.0], [934.0, 12157.6], [932.0, 12592.333333333334], [950.0, 7930.015], [949.0, 10283.142857142857], [948.0, 11153.933333333334], [946.0, 11631.8], [945.0, 11762.666666666666], [1.0, 60069.0]], "isOverall": false, "label": "Get JWKS", "isController": false}, {"data": [[731.8314108251993, 13914.73913043479]], "isOverall": false, "label": "Get JWKS-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 950.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.65170838E12, "maxY": 50123.36666666667, "series": [{"data": [[1.65170844E12, 11500.866666666667], [1.65170838E12, 50123.36666666667], [1.6517085E12, 1158.6666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65170844E12, 3020.516666666667], [1.65170838E12, 5915.55], [1.6517085E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6517085E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8451.120158887788, "minX": 1.65170838E12, "maxY": 60795.30568720379, "series": [{"data": [[1.65170844E12, 60795.30568720379], [1.65170838E12, 14163.38655462185], [1.6517085E12, 60067.33333333333]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[1.65170844E12, 59718.88461538462], [1.65170838E12, 8451.120158887788], [1.6517085E12, 60054.3125]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6517085E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.65170838E12, "maxY": 51117.81279620854, "series": [{"data": [[1.65170844E12, 51117.81279620854], [1.65170838E12, 13888.882352941178], [1.6517085E12, 0.0]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[1.65170844E12, 3710.932692307691], [1.65170838E12, 8236.820258192653], [1.6517085E12, 0.0]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6517085E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 355.1708683473385, "minX": 1.65170838E12, "maxY": 60067.33333333333, "series": [{"data": [[1.65170844E12, 11448.554502369683], [1.65170838E12, 355.1708683473385], [1.6517085E12, 60067.33333333333]], "isOverall": false, "label": "Generate SSH credential", "isController": false}, {"data": [[1.65170844E12, 59711.923076923085], [1.65170838E12, 1574.3952333664324], [1.6517085E12, 60054.18750000001]], "isOverall": false, "label": "Get JWKS", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6517085E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 608.0, "minX": 1.65170838E12, "maxY": 60007.0, "series": [{"data": [[1.65170844E12, 60007.0], [1.65170838E12, 38339.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65170844E12, 59818.0], [1.65170838E12, 26055.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65170844E12, 60007.0], [1.65170838E12, 33846.58]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65170844E12, 60007.0], [1.65170838E12, 29355.899999999994]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65170844E12, 47632.0], [1.65170838E12, 608.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65170844E12, 56402.0], [1.65170838E12, 11565.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170844E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 607.5, "minX": 1.0, "maxY": 85631.0, "series": [{"data": [[32.0, 18049.5], [2.0, 34900.5], [34.0, 1015.5], [35.0, 12874.0], [37.0, 9323.0], [36.0, 10093.0], [41.0, 3324.0], [40.0, 7956.5], [46.0, 12602.5], [49.0, 2293.0], [3.0, 33526.5], [50.0, 8389.0], [6.0, 12862.0], [109.0, 3792.0], [124.0, 5774.5], [180.0, 5368.5], [11.0, 17904.0], [13.0, 57072.0], [14.0, 24224.0], [16.0, 724.5], [1.0, 50214.0], [17.0, 21513.0], [18.0, 19448.5], [19.0, 28108.5], [20.0, 11781.5], [21.0, 7762.5], [22.0, 24265.5], [25.0, 22984.0], [26.0, 15009.5], [27.0, 20624.0], [29.0, 15614.0], [30.0, 2365.5], [31.0, 23296.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 60037.5], [9.0, 60022.0], [161.0, 60046.0], [40.0, 60021.5], [180.0, 689.0], [12.0, 60039.0], [3.0, 60060.0], [50.0, 3088.0], [13.0, 60023.0], [4.0, 60027.5], [1.0, 60087.0], [17.0, 60020.0], [18.0, 60021.5], [5.0, 60086.5], [21.0, 60026.0], [6.0, 85631.0], [25.0, 60021.0], [26.0, 60021.0], [109.0, 1183.0], [27.0, 60021.0], [7.0, 60024.0], [30.0, 60021.5], [124.0, 607.5], [31.0, 60021.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 180.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 85631.0, "series": [{"data": [[32.0, 18049.5], [2.0, 34900.5], [34.0, 1015.5], [35.0, 12874.0], [37.0, 9323.0], [36.0, 10093.0], [41.0, 3324.0], [40.0, 7956.0], [46.0, 12602.0], [49.0, 2293.0], [3.0, 33526.5], [50.0, 8389.0], [6.0, 12862.0], [109.0, 3792.0], [124.0, 5774.5], [180.0, 5368.5], [11.0, 17904.0], [13.0, 57072.0], [14.0, 24224.0], [16.0, 723.5], [1.0, 50214.0], [17.0, 21513.0], [18.0, 19448.5], [19.0, 28108.0], [20.0, 11781.0], [21.0, 7762.5], [22.0, 24265.5], [25.0, 22984.0], [26.0, 15009.0], [27.0, 20624.0], [29.0, 15613.0], [30.0, 2365.5], [31.0, 23296.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [9.0, 60022.0], [161.0, 0.0], [40.0, 60017.5], [180.0, 0.0], [12.0, 0.0], [3.0, 0.0], [50.0, 0.0], [13.0, 60023.0], [4.0, 60021.0], [1.0, 0.0], [17.0, 60020.0], [18.0, 60021.5], [5.0, 60051.5], [21.0, 60024.0], [6.0, 85631.0], [25.0, 60021.0], [26.0, 60021.0], [109.0, 0.0], [27.0, 60021.0], [7.0, 60023.0], [30.0, 60021.0], [124.0, 0.0], [31.0, 60020.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 180.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.36666666666666664, "minX": 1.65170838E12, "maxY": 31.5, "series": [{"data": [[1.65170844E12, 0.36666666666666664], [1.65170838E12, 31.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65170844E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.65170838E12, "maxY": 16.883333333333333, "series": [{"data": [[1.65170844E12, 0.31666666666666665], [1.65170838E12, 16.883333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65170844E12, 2.75], [1.65170838E12, 5.85], [1.6517085E12, 0.36666666666666664]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.65170844E12, 0.5]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.65170844E12, 0.8833333333333333]], "isOverall": false, "label": "503", "isController": false}, {"data": [[1.65170844E12, 4.316666666666666]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6517085E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.65170838E12, "maxY": 12.816666666666666, "series": [{"data": [[1.65170844E12, 1.6166666666666667], [1.65170838E12, 3.966666666666667], [1.6517085E12, 0.26666666666666666]], "isOverall": false, "label": "Get JWKS-failure", "isController": false}, {"data": [[1.65170844E12, 0.11666666666666667], [1.65170838E12, 12.816666666666666]], "isOverall": false, "label": "Get JWKS-success", "isController": false}, {"data": [[1.65170844E12, 6.833333333333333], [1.65170838E12, 1.8833333333333333], [1.6517085E12, 0.1]], "isOverall": false, "label": "Generate SSH credential-failure", "isController": false}, {"data": [[1.65170844E12, 0.2], [1.65170838E12, 4.066666666666666]], "isOverall": false, "label": "Generate SSH credential-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6517085E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.65170838E12, "maxY": 16.883333333333333, "series": [{"data": [[1.65170844E12, 0.31666666666666665], [1.65170838E12, 16.883333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65170844E12, 8.45], [1.65170838E12, 5.85], [1.6517085E12, 0.36666666666666664]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.6517085E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -14400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

